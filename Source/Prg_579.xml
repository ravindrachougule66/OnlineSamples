<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<Application>

  <Header>
    <Version val="12010"/>
    <WithIsn val="Y"/>
    <_InternalTask val="N"/>
    <IsRoot val="N"/>
    <InIndex val="N"/>
  </Header>

  <ProgramsRepository>
    <Programs>
      <Task MainProgram="N">
        <Header Description="CN14_Linkedin Profile_status" ISN_2="1" LastIsn="2" id="579">
          <Public val="CN14"/>
          <ExecutionRight comp="-1"/>
          <Resident val="N"/>
          <SQL val="N"/>
          <ReturnValue>
            <ReturnValueAttr/>
            <ParametersAttributes/>
          </ReturnValue>
          <SqlWhereExist val="N"/>
          <TaskType val="O"/>
          <External val="N"/>
          <FormType val="M"/>
          <DotNetObjectExists val="Y"/>
          <LastModified _date="734336" _time="37126" date="18/07/2011" time="10:18:46"/>
        </Header>
        <ItemIsn val="10"/>
        <Resource>
          <Columns>
            <Column id="6" name="_consumerKey">
              <PropertyList model="FIELD">
                <Model attr_obj="FIELD_ALPHA" id="1"/>
                <Picture id="157" valUnicode="200"/>
                <StoredAs id="173" val="1"/>
                <Size id="174" val="200"/>
                <_Flip id="194"/>
              </PropertyList>
            </Column>
            <Column id="21" name="_consumerSecret">
              <PropertyList model="FIELD">
                <Model attr_obj="FIELD_ALPHA" id="1"/>
                <Picture id="157" valUnicode="200"/>
                <StoredAs id="173" val="1"/>
                <Size id="174" val="200"/>
                <_Flip id="194"/>
              </PropertyList>
            </Column>
            <Column id="7" name="vToken">
              <PropertyList model="FIELD">
                <Model attr_obj="FIELD_ALPHA" id="1"/>
                <Picture id="157" valUnicode="200"/>
                <StoredAs id="173" val="1"/>
                <Size id="174" val="200"/>
                <_Flip id="194"/>
              </PropertyList>
            </Column>
            <Column id="8" name="vToken Secret">
              <PropertyList model="FIELD">
                <Model attr_obj="FIELD_ALPHA" id="1"/>
                <Picture id="157" valUnicode="200"/>
                <StoredAs id="173" val="1"/>
                <Size id="174" val="200"/>
                <_Flip id="194"/>
              </PropertyList>
            </Column>
            <Column id="24" name="vAuthorizationLink">
              <PropertyList model="FIELD">
                <Model attr_obj="FIELD_ALPHA" id="1"/>
                <Picture id="157" valUnicode="200"/>
                <StoredAs id="173" val="1"/>
                <Size id="174" val="200"/>
                <_Flip id="194"/>
              </PropertyList>
            </Column>
            <Column id="26" name="vVerifier">
              <PropertyList model="FIELD">
                <Model attr_obj="FIELD_ALPHA" id="1"/>
                <Picture id="157" valUnicode="200"/>
                <StoredAs id="173" val="1"/>
                <Size id="174" val="200"/>
                <_Flip id="194"/>
              </PropertyList>
            </Column>
            <Column id="31" name="id">
              <PropertyList model="FIELD">
                <Model attr_obj="FIELD_ALPHA" id="1"/>
                <Picture id="157" valUnicode="30"/>
                <StoredAs id="173" val="1"/>
                <Size id="174" val="30"/>
                <_Flip id="194"/>
              </PropertyList>
            </Column>
            <Column id="32" name="type">
              <PropertyList model="FIELD">
                <Model attr_obj="FIELD_NUMERIC" id="1"/>
                <Picture id="157" valUnicode="1"/>
                <_Dec id="181"/>
                <_Whole id="182" val="1"/>
                <_Negative id="192"/>
                <_FieldStyle id="276" val="1"/>
              </PropertyList>
            </Column>
            <Column id="30" name="Status">
              <PropertyList model="FIELD">
                <Model attr_obj="FIELD_ALPHA" id="1"/>
                <Picture id="157" valUnicode="30"/>
                <StoredAs id="173" val="1"/>
                <Size id="174" val="30"/>
                <_Flip id="194"/>
              </PropertyList>
            </Column>
            <Column id="29" name="Output">
              <PropertyList model="FIELD">
                <Model attr_obj="FIELD_ALPHA" id="1"/>
                <Picture id="157" valUnicode="1000"/>
                <StoredAs id="173" val="1"/>
                <Size id="174" val="1000"/>
                <_Flip id="194"/>
              </PropertyList>
            </Column>
          </Columns>
          <ColumnsLastIsn val="34"/>
        </Resource>
        <Information>
          <Key>
            <Mode val="N"/>
          </Key>
          <DB comp="-1"/>
          <Sort>
            <CLS val="A"/>
          </Sort>
          <ForceRecordDelete DEL="N"/>
          <EndTaskCondition val="N"/>
          <EvaluateEndCondition val="B"/>
          <InitialMode val="M"/>
          <Locate Direction="A"/>
          <Range Direction="A"/>
          <VarRange/>
          <TaskProperties>
            <SelectionTable val="N"/>
            <ConfirmUpdate CNFU="N"/>
            <ConfirmCancel val="N"/>
            <ErrorStrategy val="R"/>
            <LockingStrategy val="M"/>
            <CacheStrategy val="D"/>
            <ForceRecordSuffix val="N"/>
            <TransactionMode val="D"/>
            <TransactionBegin val="P"/>
            <PreloadView val="N"/>
            <AllowEmptyDataview val="Y"/>
            <KeepCreatedContext val="N"/>
          </TaskProperties>
          <SIDE_WIN>
            <AllowOptions val="N"/>
            <AllowQuery val="Y"/>
            <AllowModify val="Y"/>
            <AllowCreate val="Y"/>
            <AllowDelete val="Y"/>
            <AllowLocate val="Y"/>
            <AllowRange val="Y"/>
            <AllowIndexChange val="N"/>
            <AllowSorting val="Y"/>
            <AllowIOFiles val="N"/>
            <RecordCycle val="Y"/>
            <AllowEvents val="Y"/>
            <AllowIndexOptimization val="Y"/>
            <AllowLocationInQuery val="Y"/>
            <AllowPrintingData val="N"/>
          </SIDE_WIN>
          <WIN>
            <OpenTaskWindow val="Y"/>
            <CloseTaskWindow val="Y"/>
            <ForegroundWindow val="Y"/>
            <FlipFld val="N"/>
            <RefreshTaskWindow ReturnValue="N"/>
          </WIN>
          <BOX>
            <Direction val="V"/>
          </BOX>
        </Information>
        <INT_RECOMP_INFO>
          <v>0</v>
          <v>1</v>
          <v>2</v>
          <v>3</v>
          <v>7</v>
          <v>8</v>
          <v>9</v>
        </INT_RECOMP_INFO>
        <TaskLogic>
          <LogicUnit id="2" propagate="78">
            <Level val="R"/>
            <Type val="M"/>
            <_DspTemplate val="0"/>
            <_HeaderPosition val="1"/>
            <Scope val="S"/>
            <EngineDirective val="S"/>
            <ShowMessage val="Y"/>
            <Condition val="89"/>
            <_TotalVariabls val="10"/>
            <_TotalVirtuals val="10"/>
            <Event>
              <EventType val="S"/>
              <PublicObject comp="-1"/>
            </Event>
            <LogicLines>
              <LogicLine>
                <DATAVIEW_SRC FlowIsn="2" Type="M">
                  <Condition val="N"/>
                  <Modifier val="B"/>
                  <Direction val="C"/>
                </DATAVIEW_SRC>
              </LogicLine>
              <LogicLine>
                <Select FieldID="1" FlowIsn="3" id="1">
                  <ASS val="4"/>
                  <Column val="1"/>
                  <Type val="V"/>
                  <IsParameter val="N"/>
                  <_RecomputeIndex val="8"/>
                  <_FormIndex val="8"/>
                  <_ControlIndex val="8"/>
                  <_OleSubformIdx val="8"/>
                  <_TabbingOrderDspIndex val="8"/>
                  <DIFF_UPDATE val="T"/>
                  <Condition val="Y"/>
                  <Modifier val="S"/>
                  <Direction val="C"/>
                </Select>
              </LogicLine>
              <LogicLine>
                <Select FieldID="2" FlowIsn="4" id="2">
                  <ASS val="5"/>
                  <Column val="2"/>
                  <Type val="V"/>
                  <IsParameter val="N"/>
                  <_RecomputeIndex val="8"/>
                  <_FormIndex val="8"/>
                  <_ControlIndex val="8"/>
                  <_OleSubformIdx val="8"/>
                  <_TabbingOrderDspIndex val="8"/>
                  <DIFF_UPDATE val="T"/>
                  <Condition val="Y"/>
                  <Modifier val="S"/>
                  <Direction val="C"/>
                </Select>
              </LogicLine>
              <LogicLine>
                <Remark FlowIsn="5">
                  <Type val="0"/>
                  <Text val=" "/>
                </Remark>
              </LogicLine>
              <LogicLine>
                <Select FieldID="3" FlowIsn="6" id="3">
                  <Column val="3"/>
                  <Type val="V"/>
                  <IsParameter val="N"/>
                  <_RecomputeIndex val="8"/>
                  <_FormIndex val="8"/>
                  <_ControlIndex val="8"/>
                  <_OleSubformIdx val="8"/>
                  <_TabbingOrderDspIndex val="8"/>
                  <_DitIndexForToolkit val="13"/>
                  <DIFF_UPDATE val="T"/>
                  <Condition val="Y"/>
                  <Modifier val="S"/>
                  <Direction val="C"/>
                </Select>
              </LogicLine>
              <LogicLine>
                <Select FieldID="4" FlowIsn="7" id="4">
                  <Column val="4"/>
                  <Type val="V"/>
                  <IsParameter val="N"/>
                  <_RecomputeIndex val="8"/>
                  <_FormIndex val="8"/>
                  <_ControlIndex val="8"/>
                  <_OleSubformIdx val="8"/>
                  <_TabbingOrderDspIndex val="8"/>
                  <_DitIndexForToolkit val="15"/>
                  <DIFF_UPDATE val="T"/>
                  <Condition val="Y"/>
                  <Modifier val="S"/>
                  <Direction val="C"/>
                </Select>
              </LogicLine>
              <LogicLine>
                <Select FieldID="5" FlowIsn="8" id="5">
                  <Column val="5"/>
                  <Type val="V"/>
                  <IsParameter val="N"/>
                  <_RecomputeIndex val="8"/>
                  <_FormIndex val="8"/>
                  <_ControlIndex val="8"/>
                  <_OleSubformIdx val="8"/>
                  <_TabbingOrderDspIndex val="8"/>
                  <_DitIndexForToolkit val="17"/>
                  <DIFF_UPDATE val="T"/>
                  <Condition val="Y"/>
                  <Modifier val="S"/>
                  <Direction val="C"/>
                </Select>
              </LogicLine>
              <LogicLine>
                <Select FieldID="6" FlowIsn="9" id="6">
                  <Column val="6"/>
                  <Type val="V"/>
                  <IsParameter val="N"/>
                  <_RecomputeIndex val="1"/>
                  <_FormIndex val="1"/>
                  <_ControlLength val="7"/>
                  <_ControlIndex val="1"/>
                  <_OleSubformIdx val="1"/>
                  <_TabbingOrderDspIndex val="1"/>
                  <_DitIndexForToolkit val="19"/>
                  <DIFF_UPDATE val="T"/>
                  <Condition val="Y"/>
                  <Modifier val="S"/>
                  <Direction val="C"/>
                </Select>
              </LogicLine>
              <LogicLine>
                <Remark FlowIsn="10">
                  <Type val="0"/>
                  <Text val=" "/>
                </Remark>
              </LogicLine>
              <LogicLine>
                <Select FieldID="7" FlowIsn="11" id="7">
                  <ASS val="7"/>
                  <Column val="7"/>
                  <Type val="V"/>
                  <IsParameter val="N"/>
                  <_RecomputeIndex val="1"/>
                  <_FormIndex val="1"/>
                  <_ControlIndex val="1"/>
                  <_OleSubformIdx val="1"/>
                  <_TabbingOrderDspIndex val="1"/>
                  <_DitIndexForToolkit val="2"/>
                  <DIFF_UPDATE val="T"/>
                  <Condition val="Y"/>
                  <Modifier val="S"/>
                  <Direction val="C"/>
                </Select>
              </LogicLine>
              <LogicLine>
                <Select FieldID="8" FlowIsn="12" id="8">
                  <ASS val="8"/>
                  <Column val="8"/>
                  <Type val="V"/>
                  <IsParameter val="N"/>
                  <_RecomputeIndex val="1"/>
                  <_FormIndex val="1"/>
                  <_ControlIndex val="1"/>
                  <_OleSubformIdx val="1"/>
                  <_TabbingOrderDspIndex val="1"/>
                  <_DitIndexForToolkit val="8"/>
                  <DIFF_UPDATE val="T"/>
                  <Condition val="Y"/>
                  <Modifier val="S"/>
                  <Direction val="C"/>
                </Select>
              </LogicLine>
              <LogicLine>
                <Remark FlowIsn="13">
                  <Type val="0"/>
                  <Text val=" "/>
                </Remark>
              </LogicLine>
              <LogicLine>
                <Select FieldID="9" FlowIsn="14" id="9">
                  <Column val="9"/>
                  <Type val="V"/>
                  <IsParameter val="N"/>
                  <_RecomputeIndex val="1"/>
                  <_FormIndex val="1"/>
                  <_ControlIndex val="1"/>
                  <_OleSubformIdx val="1"/>
                  <_TabbingOrderDspIndex val="1"/>
                  <_DitIndexForToolkit val="4"/>
                  <DIFF_UPDATE val="T"/>
                  <Condition val="Y"/>
                  <Modifier val="S"/>
                  <Direction val="C"/>
                </Select>
              </LogicLine>
              <LogicLine>
                <Select FieldID="10" FlowIsn="15" id="10">
                  <Column val="10"/>
                  <Type val="V"/>
                  <IsParameter val="N"/>
                  <_RecomputeIndex val="1"/>
                  <_FormIndex val="1"/>
                  <_ControlIndex val="1"/>
                  <_OleSubformIdx val="1"/>
                  <_TabbingOrderDspIndex val="1"/>
                  <_DitIndexForToolkit val="20"/>
                  <DIFF_UPDATE val="T"/>
                  <Condition val="Y"/>
                  <Modifier val="S"/>
                  <Direction val="C"/>
                </Select>
              </LogicLine>
            </LogicLines>
          </LogicUnit>
          <LogicUnit id="3" propagate="78">
            <Level val="K"/>
            <_DspTemplate val="0"/>
            <_HeaderPosition val="15"/>
            <Scope val="S"/>
            <EngineDirective val="S"/>
            <ShowMessage val="Y"/>
            <Condition val="89"/>
            <Event>
              <EventType val="S"/>
              <PublicObject comp="-1"/>
            </Event>
            <TXT val="This sample uses a C# code to perform the authentication and sign the content."/>
          </LogicUnit>
          <LogicUnit id="4" propagate="78">
            <Level val="K"/>
            <_DspTemplate val="0"/>
            <_HeaderPosition val="15"/>
            <Scope val="S"/>
            <EngineDirective val="S"/>
            <ShowMessage val="Y"/>
            <Condition val="89"/>
            <Event>
              <EventType val="S"/>
              <PublicObject comp="-1"/>
            </Event>
            <TXT val="The C# code is based on the LinkedInOauth.zip file available at:"/>
          </LogicUnit>
          <LogicUnit id="5" propagate="78">
            <Level val="K"/>
            <_DspTemplate val="0"/>
            <_HeaderPosition val="15"/>
            <Scope val="S"/>
            <EngineDirective val="S"/>
            <ShowMessage val="Y"/>
            <Condition val="89"/>
            <Event>
              <EventType val="S"/>
              <PublicObject comp="-1"/>
            </Event>
            <TXT val="http://developer.linkedin.com/thread/1346"/>
          </LogicUnit>
          <LogicUnit id="6" propagate="78">
            <Level val="K"/>
            <_DspTemplate val="0"/>
            <_HeaderPosition val="15"/>
            <Scope val="S"/>
            <EngineDirective val="S"/>
            <ShowMessage val="Y"/>
            <Condition val="89"/>
            <Event>
              <EventType val="S"/>
              <PublicObject comp="-1"/>
            </Event>
            <Expanded val="1"/>
          </LogicUnit>
          <LogicUnit id="7" propagate="78">
            <Level val="K"/>
            <_DspTemplate val="0"/>
            <_HeaderPosition val="15"/>
            <Scope val="S"/>
            <EngineDirective val="S"/>
            <ShowMessage val="Y"/>
            <Condition val="89"/>
            <Event>
              <EventType val="S"/>
              <PublicObject comp="-1"/>
            </Event>
            <TXT val="The C# code in all the Invoke .NET operations has a similar section defining the classes and a specific last function."/>
          </LogicUnit>
          <LogicUnit id="8" propagate="78">
            <Level val="K"/>
            <_DspTemplate val="0"/>
            <_HeaderPosition val="15"/>
            <Scope val="S"/>
            <EngineDirective val="S"/>
            <ShowMessage val="Y"/>
            <Condition val="89"/>
            <Event>
              <EventType val="S"/>
              <PublicObject comp="-1"/>
            </Event>
            <TXT val="It is advised to use an assembly dll for the classes and to define the _oauth object once per the task"/>
          </LogicUnit>
          <LogicUnit id="9" propagate="78">
            <Level val="K"/>
            <_DspTemplate val="0"/>
            <_HeaderPosition val="15"/>
            <Scope val="S"/>
            <EngineDirective val="S"/>
            <ShowMessage val="Y"/>
            <Condition val="89"/>
            <Event>
              <EventType val="S"/>
              <PublicObject comp="-1"/>
            </Event>
            <TXT val="(instead of defining everything in every Invoke operation and storing the Tokens in the task)"/>
          </LogicUnit>
          <LogicUnit id="10" propagate="78">
            <Level val="K"/>
            <_DspTemplate val="0"/>
            <_HeaderPosition val="15"/>
            <Scope val="S"/>
            <EngineDirective val="S"/>
            <ShowMessage val="Y"/>
            <Condition val="89"/>
            <Event>
              <EventType val="S"/>
              <PublicObject comp="-1"/>
            </Event>
          </LogicUnit>
          <LogicUnit id="11" propagate="78">
            <Level val="H"/>
            <Type val="U"/>
            <_DspTemplate val="0"/>
            <_HeaderPosition val="15"/>
            <Scope val="S"/>
            <EngineDirective val="S"/>
            <ShowMessage val="Y"/>
            <Condition val="89"/>
            <Event>
              <EventType val="U"/>
              <PublicObject comp="-1" obj="1"/>
            </Event>
            <Expanded val="1"/>
            <LogicLines>
              <LogicLine>
                <Invoke FlowIsn="16">
                  <OperationType val="."/>
                  <TaskID comp="-1"/>
                  <Lock val="N"/>
                  <Arguments>
                    <Argument>
                      <id val="1"/>
                      <Skip val="N"/>
                      <DotNetType val="void"/>
                    </Argument>
                    <Argument>
                      <id val="2"/>
                      <Variable val="1"/>
                      <Skip val="N"/>
                      <Name val="ConsumerKey"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                    <Argument>
                      <id val="3"/>
                      <Variable val="2"/>
                      <Skip val="N"/>
                      <Name val="ConsumerSecret"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                    <Argument>
                      <id val="4"/>
                      <Variable val="3"/>
                      <Skip val="N"/>
                      <Name val="Token"/>
                      <VT_Type val="4"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                    <Argument>
                      <id val="5"/>
                      <Variable val="4"/>
                      <Skip val="N"/>
                      <Name val="TokenSecret"/>
                      <VT_Type val="4"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                    <Argument>
                      <id val="6"/>
                      <Variable val="5"/>
                      <Skip val="N"/>
                      <Name val="AuthorizationLink"/>
                      <VT_Type val="4"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                  </Arguments>
                  <Wait val="Y"/>
                  <SyncData val="N"/>
                  <FunctionName val="func"/>
                  <SnippetCode val="using System;&#xA;using System.Security.Cryptography;&#xA;using System.Collections.Generic;&#xA;using System.Collections.Specialized;&#xA;using System.Web;&#xA;using System.Net;&#xA;using System.Text;&#xA;using System.IO;&#xA;&#xA;    public class oAuthBase&#xA;    {&#xA;&#xA;        /// &lt;summary>&#xA;        /// Provides a predefined set of algorithms that are supported officially by the protocol&#xA;        /// &lt;/summary>&#xA;        public enum SignatureTypes&#xA;        {&#xA;            HMACSHA1,&#xA;            PLAINTEXT,&#xA;            RSASHA1&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Provides an internal structure to sort the query parameter&#xA;        /// &lt;/summary>&#xA;        protected class QueryParameter&#xA;        {&#xA;            private string name = null;&#xA;            private string value = null;&#xA;&#xA;            public QueryParameter(string name, string value)&#xA;            {&#xA;                this.name = name;&#xA;                this.value = value;&#xA;            }&#xA;&#xA;            public string Name&#xA;            {&#xA;                get { return name; }&#xA;            }&#xA;&#xA;            public string Value&#xA;            {&#xA;                get { return value; }&#xA;            }&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Comparer class used to perform the sorting of the query parameters&#xA;        /// &lt;/summary>&#xA;        protected class QueryParameterComparer : IComparer&lt;QueryParameter>&#xA;        {&#xA;&#xA;            #region IComparer&lt;QueryParameter> Members&#xA;&#xA;            public int Compare(QueryParameter x, QueryParameter y)&#xA;            {&#xA;                if (x.Name == y.Name)&#xA;                {&#xA;                    return string.Compare(x.Value, y.Value);&#xA;                }&#xA;                else&#xA;                {&#xA;                    return string.Compare(x.Name, y.Name);&#xA;                }&#xA;            }&#xA;&#xA;            #endregion&#xA;        }&#xA;&#xA;        protected const string OAuthVersion = &quot;1.0&quot;;&#xA;        protected const string OAuthParameterPrefix = &quot;oauth_&quot;;&#xA;&#xA;        //&#xA;        // List of know and used oauth parameters' names&#xA;        //        &#xA;        protected const string OAuthConsumerKeyKey = &quot;oauth_consumer_key&quot;;&#xA;        protected const string OAuthCallbackKey = &quot;oauth_callback&quot;;&#xA;        protected const string OAuthVersionKey = &quot;oauth_version&quot;;&#xA;        protected const string OAuthSignatureMethodKey = &quot;oauth_signature_method&quot;;&#xA;        protected const string OAuthSignatureKey = &quot;oauth_signature&quot;;&#xA;        protected const string OAuthTimestampKey = &quot;oauth_timestamp&quot;;&#xA;        protected const string OAuthNonceKey = &quot;oauth_nonce&quot;;&#xA;        protected const string OAuthTokenKey = &quot;oauth_token&quot;;&#xA;        protected const string oAauthVerifier = &quot;oauth_verifier&quot;;&#xA;        protected const string OAuthTokenSecretKey = &quot;oauth_token_secret&quot;;&#xA;&#xA;        protected const string HMACSHA1SignatureType = &quot;HMAC-SHA1&quot;;&#xA;        protected const string PlainTextSignatureType = &quot;PLAINTEXT&quot;;&#xA;        protected const string RSASHA1SignatureType = &quot;RSA-SHA1&quot;;&#xA;&#xA;        protected Random random = new Random();&#xA;&#xA;        private string oauth_verifier;&#xA;        public string Verifier { get { return oauth_verifier; } set { oauth_verifier = value; } }&#xA;&#xA;&#xA;        protected string unreservedChars = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.~&quot;;&#xA;&#xA;        /// &lt;summary>&#xA;        /// Helper function to compute a hash value&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;hashAlgorithm&quot;>The hashing algoirhtm used. If that algorithm needs some initialization, like HMAC and its derivatives, they should be initialized prior to passing it to this function&lt;/param>&#xA;        /// &lt;param name=&quot;data&quot;>The data to hash&lt;/param>&#xA;        /// &lt;returns>a Base64 string of the hash value&lt;/returns>&#xA;        private string ComputeHash(HashAlgorithm hashAlgorithm, string data)&#xA;        {&#xA;            if (hashAlgorithm == null)&#xA;            {&#xA;                throw new ArgumentNullException(&quot;hashAlgorithm&quot;);&#xA;            }&#xA;&#xA;            if (string.IsNullOrEmpty(data))&#xA;            {&#xA;                throw new ArgumentNullException(&quot;data&quot;);&#xA;            }&#xA;&#xA;            byte[] dataBuffer = System.Text.Encoding.ASCII.GetBytes(data);&#xA;            byte[] hashBytes = hashAlgorithm.ComputeHash(dataBuffer);&#xA;&#xA;            return Convert.ToBase64String(hashBytes);&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Internal function to cut out all non oauth query string parameters (all parameters not begining with &quot;oauth_&quot;)&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;parameters&quot;>The query string part of the Url&lt;/param>&#xA;        /// &lt;returns>A list of QueryParameter each containing the parameter name and value&lt;/returns>&#xA;        private List&lt;QueryParameter> GetQueryParameters(string parameters)&#xA;        {&#xA;            if (parameters.StartsWith(&quot;?&quot;))&#xA;            {&#xA;                parameters = parameters.Remove(0, 1);&#xA;            }&#xA;&#xA;            List&lt;QueryParameter> result = new List&lt;QueryParameter>();&#xA;&#xA;            if (!string.IsNullOrEmpty(parameters))&#xA;            {&#xA;                string[] p = parameters.Split('&amp;');&#xA;                foreach (string s in p)&#xA;                {&#xA;                    if (!string.IsNullOrEmpty(s) &amp;&amp; !s.StartsWith(OAuthParameterPrefix))&#xA;                    {&#xA;                        if (s.IndexOf('=') > -1)&#xA;                        {&#xA;                            string[] temp = s.Split('=');&#xA;                            result.Add(new QueryParameter(temp[0], temp[1]));&#xA;                        }&#xA;                        else&#xA;                        {&#xA;                            result.Add(new QueryParameter(s, string.Empty));&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;&#xA;            return result;&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// This is a different Url Encode implementation since the default .NET one outputs the percent encoding in lower case.&#xA;        /// While this is not a problem with the percent encoding spec, it is used in upper case throughout OAuth&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;value&quot;>The value to Url encode&lt;/param>&#xA;        /// &lt;returns>Returns a Url encoded string&lt;/returns>&#xA;        public string UrlEncode(string value)&#xA;        {&#xA;            StringBuilder result = new StringBuilder();&#xA;&#xA;            foreach (char symbol in value)&#xA;            {&#xA;                if (unreservedChars.IndexOf(symbol) != -1)&#xA;                {&#xA;                    result.Append(symbol);&#xA;                }&#xA;                else&#xA;                {&#xA;                    result.Append('%' + String.Format(&quot;{0:X2}&quot;, (int)symbol));&#xA;                }&#xA;            }&#xA;&#xA;            return result.ToString();&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Normalizes the request parameters according to the spec&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;parameters&quot;>The list of parameters already sorted&lt;/param>&#xA;        /// &lt;returns>a string representing the normalized parameters&lt;/returns>&#xA;        protected string NormalizeRequestParameters(IList&lt;QueryParameter> parameters)&#xA;        {&#xA;            StringBuilder sb = new StringBuilder();&#xA;            QueryParameter p = null;&#xA;            for (int i = 0; i &lt; parameters.Count; i++)&#xA;            {&#xA;                p = parameters[i];&#xA;                sb.AppendFormat(&quot;{0}={1}&quot;, p.Name, p.Value);&#xA;&#xA;                if (i &lt; parameters.Count - 1)&#xA;                {&#xA;                    sb.Append(&quot;&amp;&quot;);&#xA;                }&#xA;            }&#xA;&#xA;            return sb.ToString();&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Generate the signature base that is used to produce the signature&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;url&quot;>The full url that needs to be signed including its non OAuth url parameters&lt;/param>&#xA;        /// &lt;param name=&quot;consumerKey&quot;>The consumer key&lt;/param>        &#xA;        /// &lt;param name=&quot;token&quot;>The token, if available. If not available pass null or an empty string&lt;/param>&#xA;        /// &lt;param name=&quot;tokenSecret&quot;>The token secret, if available. If not available pass null or an empty string&lt;/param>&#xA;        /// &lt;param name=&quot;httpMethod&quot;>The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)&lt;/param>&#xA;        /// &lt;param name=&quot;signatureType&quot;>The signature type. To use the default values use &lt;see cref=&quot;OAuthBase.SignatureTypes&quot;>OAuthBase.SignatureTypes&lt;/see>.&lt;/param>&#xA;        /// &lt;returns>The signature base&lt;/returns>&#xA;        public string GenerateSignatureBase(Uri url, string consumerKey, string token, string tokenSecret, string httpMethod, string timeStamp, string nonce, string callback, string signatureType, out string normalizedUrl, out string normalizedRequestParameters)&#xA;        {&#xA;            if (token == null)&#xA;            {&#xA;                token = string.Empty;&#xA;            }&#xA;&#xA;            if (tokenSecret == null)&#xA;            {&#xA;                tokenSecret = string.Empty;&#xA;            }&#xA;&#xA;            if (string.IsNullOrEmpty(consumerKey))&#xA;            {&#xA;                throw new ArgumentNullException(&quot;consumerKey&quot;);&#xA;            }&#xA;&#xA;            if (string.IsNullOrEmpty(httpMethod))&#xA;            {&#xA;                throw new ArgumentNullException(&quot;httpMethod&quot;);&#xA;            }&#xA;&#xA;            if (string.IsNullOrEmpty(signatureType))&#xA;            {&#xA;                throw new ArgumentNullException(&quot;signatureType&quot;);&#xA;            }&#xA;&#xA;            normalizedUrl = null;&#xA;            normalizedRequestParameters = null;&#xA;&#xA;            List&lt;QueryParameter> parameters = GetQueryParameters(url.Query);&#xA;            parameters.Add(new QueryParameter(OAuthVersionKey, OAuthVersion));&#xA;            parameters.Add(new QueryParameter(OAuthNonceKey, nonce));&#xA;            parameters.Add(new QueryParameter(OAuthTimestampKey, timeStamp));&#xA;            parameters.Add(new QueryParameter(OAuthSignatureMethodKey, signatureType));&#xA;            parameters.Add(new QueryParameter(OAuthConsumerKeyKey, consumerKey));&#xA;&#xA;            //TODO: Make this less of a hack&#xA;            if (!string.IsNullOrEmpty(callback))&#xA;            {&#xA;                parameters.Add(new QueryParameter(OAuthCallbackKey, UrlEncode(callback)));&#xA;            }&#xA;&#xA;            if (!string.IsNullOrEmpty(token))&#xA;            {&#xA;                parameters.Add(new QueryParameter(OAuthTokenKey, token));&#xA;            }&#xA;&#xA;            if (!string.IsNullOrEmpty(oauth_verifier))&#xA;            {&#xA;                parameters.Add(new QueryParameter(oAauthVerifier, oauth_verifier));&#xA;            }&#xA;&#xA;&#xA;            parameters.Sort(new QueryParameterComparer());&#xA;&#xA;&#xA;            normalizedUrl = string.Format(&quot;{0}://{1}&quot;, url.Scheme, url.Host);&#xA;            if (!((url.Scheme == &quot;http&quot; &amp;&amp; url.Port == 80) || (url.Scheme == &quot;https&quot; &amp;&amp; url.Port == 443)))&#xA;            {&#xA;                normalizedUrl += &quot;:&quot; + url.Port;&#xA;            }&#xA;            normalizedUrl += url.AbsolutePath;&#xA;            normalizedRequestParameters = NormalizeRequestParameters(parameters);&#xA;&#xA;            StringBuilder signatureBase = new StringBuilder();&#xA;            signatureBase.AppendFormat(&quot;{0}&amp;&quot;, httpMethod.ToUpper());&#xA;            signatureBase.AppendFormat(&quot;{0}&amp;&quot;, UrlEncode(normalizedUrl));&#xA;            signatureBase.AppendFormat(&quot;{0}&quot;, UrlEncode(normalizedRequestParameters));&#xA;&#xA;            return signatureBase.ToString();&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Generate the signature value based on the given signature base and hash algorithm&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;signatureBase&quot;>The signature based as produced by the GenerateSignatureBase method or by any other means&lt;/param>&#xA;        /// &lt;param name=&quot;hash&quot;>The hash algorithm used to perform the hashing. If the hashing algorithm requires initialization or a key it should be set prior to calling this method&lt;/param>&#xA;        /// &lt;returns>A base64 string of the hash value&lt;/returns>&#xA;        public string GenerateSignatureUsingHash(string signatureBase, HashAlgorithm hash)&#xA;        {&#xA;            return ComputeHash(hash, signatureBase);&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Generates a signature using the HMAC-SHA1 algorithm&#xA;        /// &lt;/summary>&#x9;&#x9;&#xA;        /// &lt;param name=&quot;url&quot;>The full url that needs to be signed including its non OAuth url parameters&lt;/param>&#xA;        /// &lt;param name=&quot;consumerKey&quot;>The consumer key&lt;/param>&#xA;        /// &lt;param name=&quot;consumerSecret&quot;>The consumer seceret&lt;/param>&#xA;        /// &lt;param name=&quot;token&quot;>The token, if available. If not available pass null or an empty string&lt;/param>&#xA;        /// &lt;param name=&quot;tokenSecret&quot;>The token secret, if available. If not available pass null or an empty string&lt;/param>&#xA;        /// &lt;param name=&quot;httpMethod&quot;>The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)&lt;/param>&#xA;        /// &lt;returns>A base64 string of the hash value&lt;/returns>&#xA;        public string GenerateSignature(Uri url, string consumerKey, string consumerSecret, string token, string tokenSecret, string httpMethod, string timeStamp, string nonce, string callback, out string normalizedUrl, out string normalizedRequestParameters)&#xA;        {&#xA;            return GenerateSignature(url, consumerKey, consumerSecret, token, tokenSecret, httpMethod, timeStamp, nonce, callback, SignatureTypes.HMACSHA1, out normalizedUrl, out normalizedRequestParameters);&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Generates a signature using the specified signatureType &#xA;        /// &lt;/summary>&#x9;&#x9;&#xA;        /// &lt;param name=&quot;url&quot;>The full url that needs to be signed including its non OAuth url parameters&lt;/param>&#xA;        /// &lt;param name=&quot;consumerKey&quot;>The consumer key&lt;/param>&#xA;        /// &lt;param name=&quot;consumerSecret&quot;>The consumer seceret&lt;/param>&#xA;        /// &lt;param name=&quot;token&quot;>The token, if available. If not available pass null or an empty string&lt;/param>&#xA;        /// &lt;param name=&quot;tokenSecret&quot;>The token secret, if available. If not available pass null or an empty string&lt;/param>&#xA;        /// &lt;param name=&quot;httpMethod&quot;>The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)&lt;/param>&#xA;        /// &lt;param name=&quot;signatureType&quot;>The type of signature to use&lt;/param>&#xA;        /// &lt;returns>A base64 string of the hash value&lt;/returns>&#xA;        public string GenerateSignature(Uri url, string consumerKey, string consumerSecret, string token, string tokenSecret, string httpMethod, string timeStamp, string nonce, string callback, SignatureTypes signatureType, out string normalizedUrl, out string normalizedRequestParameters)&#xA;        {&#xA;            normalizedUrl = null;&#xA;            normalizedRequestParameters = null;&#xA;&#xA;            switch (signatureType)&#xA;            {&#xA;                case SignatureTypes.PLAINTEXT:&#xA;                    return HttpUtility.UrlEncode(string.Format(&quot;{0}&amp;{1}&quot;, consumerSecret, tokenSecret));&#xA;                case SignatureTypes.HMACSHA1:&#xA;                    string signatureBase = GenerateSignatureBase(url, consumerKey, token, tokenSecret, httpMethod, timeStamp, nonce, callback, HMACSHA1SignatureType, out normalizedUrl, out normalizedRequestParameters);&#xA;                    HMACSHA1 hmacsha1 = new HMACSHA1();&#xA;                    hmacsha1.Key = Encoding.ASCII.GetBytes(string.Format(&quot;{0}&amp;{1}&quot;, UrlEncode(consumerSecret), string.IsNullOrEmpty(tokenSecret) ? &quot;&quot; : UrlEncode(tokenSecret)));&#xA;&#xA;                    return GenerateSignatureUsingHash(signatureBase, hmacsha1);&#xA;                case SignatureTypes.RSASHA1:&#xA;                    throw new NotImplementedException();&#xA;                default:&#xA;                    throw new ArgumentException(&quot;Unknown signature type&quot;, &quot;signatureType&quot;);&#xA;            }&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Generate the timestamp for the signature        &#xA;        /// &lt;/summary>&#xA;        /// &lt;returns>&lt;/returns>&#xA;&#xA;        public virtual string GenerateTimeStamp()&#xA;        {&#xA;            // Default implementation of UNIX time of the current UTC time&#xA;            TimeSpan ts = DateTime.UtcNow - new DateTime(1970, 1, 1, 0, 0, 0, 0);&#xA;            return Convert.ToInt64(ts.TotalSeconds).ToString();&#xA;        }&#xA;&#xA;        /*&#xA;       public virtual string GenerateTimeStamp() {&#xA;           // Default implementation of UNIX time of the current UTC time&#xA;           TimeSpan ts = DateTime.UtcNow - new DateTime(1970, 1, 1, 0, 0, 0, 0);&#xA;           string timeStamp = ts.TotalSeconds.ToString();&#xA;           timeStamp = timeStamp.Substring(0, timeStamp.IndexOf(&quot;,&quot;));&#xA;           return Convert.ToInt64(timeStamp).ToString(); &#xA;       }*/&#xA;&#xA;        /// &lt;summary>&#xA;        /// Generate a nonce&#xA;        /// &lt;/summary>&#xA;        /// &lt;returns>&lt;/returns>&#xA;        public virtual string GenerateNonce()&#xA;        {&#xA;            // Just a simple implementation of a random number between 123400 and 9999999&#xA;            return random.Next(123400, 9999999).ToString();&#xA;        }&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;&#xA;    public class OAuthLinkedIn : oAuthBase&#xA;    {&#xA;        /*Consumer settings from linkedin*/&#xA;        public string _consumerKey = &quot;&quot;;&#xA;        public string _consumerSecret = &quot;&quot;;&#xA;&#xA;        public enum Method { GET, POST, PUT, DELETE };&#xA;        public const string USER_AGENT = &quot;YourAgent&quot;;&#xA;        public const string REQUEST_TOKEN = &quot;https://api.linkedin.com/uas/oauth/requestToken&quot;;&#xA;        public const string AUTHORIZE = &quot;https://api.linkedin.com/uas/oauth/authorize&quot;;&#xA;        public const string ACCESS_TOKEN = &quot;https://api.linkedin.com/uas/oauth/accessToken&quot;;&#xA;        public const string CALLBACK = &quot;https://api.linkedin.com/uas/oauth/authorize&quot;;&#xA;&#xA;        private string _token = &quot;&quot;;&#xA;        private string _tokenSecret = &quot;&quot;;&#xA;        &#xA;        #region PublicPropertiies&#xA;        public string ConsumerKey { get { return _consumerKey; } set { _consumerKey = value; } }&#xA;        public string ConsumerSecret { get { return _consumerSecret;} set { _consumerSecret = value; } }&#xA;        public string Token { get { return _token; } set { _token = value; } }&#xA;        public string TokenSecret { get { return _tokenSecret; } set { _tokenSecret = value; } }&#xA;        #endregion&#xA;&#xA;        /// &lt;summary>&#xA;        /// Get the linkedin request token using the consumer key and secret.  Also initializes tokensecret&#xA;        /// &lt;/summary>&#xA;        /// &lt;returns>The request token.&lt;/returns>&#xA;        public String getRequestToken() {&#xA;            string ret = null;&#xA;            string response = oAuthWebRequest(Method.POST, REQUEST_TOKEN, String.Empty);&#xA;            if (response.Length > 0)&#xA;            {&#xA;                NameValueCollection qs = HttpUtility.ParseQueryString(response);&#xA;                if (qs[&quot;oauth_token&quot;] != null)&#xA;                {&#xA;                    this.Token = qs[&quot;oauth_token&quot;];&#xA;                    this.TokenSecret = qs[&quot;oauth_token_secret&quot;];&#xA;                    ret = this.Token;&#xA;                }&#xA;            }&#xA;            return ret;        &#xA;        }&#xA;&#xA;&#xA;        /// &lt;summary>&#xA;        /// Get the access token&#xA;        /// &lt;/summary>&#xA;        /// &lt;returns>The access token.&lt;/returns>        &#xA;        public String getAccessToken() {&#xA;            if (string.IsNullOrEmpty(Token) || string.IsNullOrEmpty(Verifier))&#xA;            {&#xA;                Exception e = new Exception(&quot;The request token and verifier were not set&quot;);&#xA;                throw e;&#xA;            }&#xA;&#xA;            string response = oAuthWebRequest(Method.POST, ACCESS_TOKEN, string.Empty);&#xA;&#xA;            if (response.Length > 0)&#xA;            {&#xA;                NameValueCollection qs = HttpUtility.ParseQueryString(response);&#xA;                if (qs[&quot;oauth_token&quot;] != null)&#xA;                {&#xA;                    this.Token = qs[&quot;oauth_token&quot;];&#xA;                }&#xA;                if (qs[&quot;oauth_token_secret&quot;] != null)&#xA;                {&#xA;                    this.TokenSecret = qs[&quot;oauth_token_secret&quot;];&#xA;                }&#xA;            }&#xA;&#xA;            return Token;        &#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Get the link to Linked In's authorization page for this application.&#xA;        /// &lt;/summary>&#xA;        /// &lt;returns>The url with a valid request token, or a null string.&lt;/returns>&#xA;        public string AuthorizationLink&#xA;        {&#xA;            get { return AUTHORIZE + &quot;?oauth_token=&quot; + this.Token; }&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Submit a web request using oAuth.&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;method&quot;>GET or POST&lt;/param>&#xA;        /// &lt;param name=&quot;url&quot;>The full url, including the querystring.&lt;/param>&#xA;        /// &lt;param name=&quot;postData&quot;>Data to post (querystring format)&lt;/param>&#xA;        /// &lt;returns>The web server response.&lt;/returns>&#xA;        public string oAuthWebRequest(Method method, string url, string postData)&#xA;        {&#xA;            string outUrl = &quot;&quot;;&#xA;            string querystring = &quot;&quot;;&#xA;            string ret = &quot;&quot;;&#xA;&#xA;            //Setup postData for signing.&#xA;            //Add the postData to the querystring.&#xA;            if (method == Method.POST)&#xA;            {&#xA;                if (postData.Length > 0)&#xA;                {&#xA;                    //Decode the parameters and re-encode using the oAuth UrlEncode method.&#xA;                    NameValueCollection qs = HttpUtility.ParseQueryString(postData);&#xA;                    postData = &quot;&quot;;&#xA;                    foreach (string key in qs.AllKeys)&#xA;                    {&#xA;                        if (postData.Length > 0)&#xA;                        {&#xA;                            postData += &quot;&amp;&quot;;&#xA;                        }&#xA;                        qs[key] = HttpUtility.UrlDecode(qs[key]);&#xA;                        qs[key] = this.UrlEncode(qs[key]);&#xA;                        postData += key + &quot;=&quot; + qs[key];&#xA;&#xA;                    }&#xA;                    if (url.IndexOf(&quot;?&quot;) > 0)&#xA;                    {&#xA;                        url += &quot;&amp;&quot;;&#xA;                    }&#xA;                    else&#xA;                    {&#xA;                        url += &quot;?&quot;;&#xA;                    }&#xA;                    url += postData;&#xA;                }&#xA;            }&#xA;&#xA;            Uri uri = new Uri(url);&#xA;&#xA;            string nonce = this.GenerateNonce();&#xA;            string timeStamp = this.GenerateTimeStamp();&#xA;            &#xA;            string callback = &quot;&quot;;&#xA;            if (url.ToString().Contains(REQUEST_TOKEN))&#xA;                callback = CALLBACK;&#xA;&#xA;            //Generate Signature&#xA;            string sig = this.GenerateSignature(uri,&#xA;                this.ConsumerKey,&#xA;                this.ConsumerSecret,&#xA;                this.Token,&#xA;                this.TokenSecret,&#xA;                method.ToString(),&#xA;                timeStamp,&#xA;                nonce,&#xA;                callback,&#xA;                out outUrl,&#xA;                out querystring);&#xA;&#xA;&#xA;            querystring += &quot;&amp;oauth_signature=&quot; + HttpUtility.UrlEncode(sig);&#xA;&#xA;            //Convert the querystring to postData&#xA;            if (method == Method.POST)&#xA;            {&#xA;                postData = querystring;&#xA;                querystring = &quot;&quot;;&#xA;            }&#xA;&#xA;            if (querystring.Length > 0)&#xA;            {&#xA;                outUrl += &quot;?&quot;;&#xA;            }&#xA;&#xA;            if (method == Method.POST || method == Method.GET)&#xA;                ret = WebRequest(method, outUrl + querystring, postData);&#xA;                &#xA;            return ret;&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// WebRequestWithPut&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;method&quot;>WebRequestWithPut&lt;/param>&#xA;        /// &lt;param name=&quot;url&quot;>&lt;/param>&#xA;        /// &lt;param name=&quot;postData&quot;>&lt;/param>&#xA;        /// &lt;returns>&lt;/returns>&#xA;        public string APIWebRequest(string method, string url, string postData)&#xA;        {&#xA;            Uri uri = new Uri(url);&#xA;            string nonce = this.GenerateNonce();&#xA;            string timeStamp = this.GenerateTimeStamp();&#xA;&#xA;            string outUrl, querystring;&#xA;&#xA;            //Generate Signature&#xA;            string sig = this.GenerateSignature(uri,&#xA;                this.ConsumerKey,&#xA;                this.ConsumerSecret,&#xA;                this.Token,&#xA;                this.TokenSecret,&#xA;                method,&#xA;                timeStamp,&#xA;                nonce,&#xA;                null,&#xA;                out outUrl,&#xA;                out querystring);&#xA;&#xA;            HttpWebRequest webRequest = null;&#xA;&#xA;            webRequest = System.Net.WebRequest.Create(url) as HttpWebRequest;&#xA;            webRequest.Method = method;&#xA;            webRequest.Credentials = CredentialCache.DefaultCredentials;&#xA;            webRequest.AllowWriteStreamBuffering = true;&#xA;&#xA;            webRequest.PreAuthenticate = true;&#xA;            webRequest.ServicePoint.Expect100Continue = false;&#xA;            ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3;&#xA;&#xA;            webRequest.Headers.Add(&quot;Authorization&quot;, &quot;OAuth realm=\&quot;http://api.linkedin.com/\&quot;,oauth_consumer_key=\&quot;&quot; + this.ConsumerKey + &quot;\&quot;,oauth_token=\&quot;&quot; + this.Token + &quot;\&quot;,oauth_signature_method=\&quot;HMAC-SHA1\&quot;,oauth_signature=\&quot;&quot; + HttpUtility.UrlEncode(sig) + &quot;\&quot;,oauth_timestamp=\&quot;&quot; + timeStamp + &quot;\&quot;,oauth_nonce=\&quot;&quot; + nonce + &quot;\&quot;,oauth_verifier=\&quot;&quot; + this.Verifier + &quot;\&quot;, oauth_version=\&quot;1.0\&quot;&quot;);            &#xA;&#xA;            if (postData != null)&#xA;            {&#xA;                byte[] fileToSend = Encoding.UTF8.GetBytes(postData);&#xA;                webRequest.ContentLength = fileToSend.Length;&#xA;&#xA;                Stream reqStream = webRequest.GetRequestStream();&#xA;&#xA;                reqStream.Write(fileToSend, 0, fileToSend.Length);&#xA;                reqStream.Close();&#xA;            }&#xA;&#xA;            string returned = WebResponseGet(webRequest);&#xA;&#xA;            return returned;&#xA;        }&#xA;&#xA;&#xA;        /// &lt;summary>&#xA;        /// Web Request Wrapper&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;method&quot;>Http Method&lt;/param>&#xA;        /// &lt;param name=&quot;url&quot;>Full url to the web resource&lt;/param>&#xA;        /// &lt;param name=&quot;postData&quot;>Data to post in querystring format&lt;/param>&#xA;        /// &lt;returns>The web server response.&lt;/returns>&#xA;        public string WebRequest(Method method, string url, string postData)&#xA;        {&#xA;            HttpWebRequest webRequest = null;&#xA;            StreamWriter requestWriter = null;&#xA;            string responseData = &quot;&quot;;&#xA;&#xA;            webRequest = System.Net.WebRequest.Create(url) as HttpWebRequest;&#xA;            webRequest.Method = method.ToString();&#xA;            webRequest.ServicePoint.Expect100Continue = false;&#xA;            webRequest.UserAgent  = USER_AGENT;&#xA;            webRequest.Timeout = 20000;&#xA;&#xA;            if (method == Method.POST)&#xA;            {&#xA;                webRequest.ContentType = &quot;application/x-www-form-urlencoded&quot;;&#xA;&#xA;                requestWriter = new StreamWriter(webRequest.GetRequestStream());&#xA;                try&#xA;                {&#xA;                    requestWriter.Write(postData);&#xA;                }&#xA;                catch&#xA;                {&#xA;                    throw;&#xA;                }&#xA;                finally&#xA;                {&#xA;                    requestWriter.Close();&#xA;                    requestWriter = null;&#xA;                }&#xA;            }&#xA;&#xA;            responseData = WebResponseGet(webRequest);&#xA;&#xA;            webRequest = null;&#xA;&#xA;            return responseData;&#xA;&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Process the web response.&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;webRequest&quot;>The request object.&lt;/param>&#xA;        /// &lt;returns>The response data.&lt;/returns>&#xA;        public string WebResponseGet(HttpWebRequest webRequest)&#xA;        {&#xA;            StreamReader responseReader = null;&#xA;            string responseData = &quot;&quot;;&#xA;&#xA;            try&#xA;            {&#xA;                responseReader = new StreamReader(webRequest.GetResponse().GetResponseStream());&#xA;                responseData = responseReader.ReadToEnd();&#xA;            }&#xA;            catch (Exception e)&#xA;            {&#xA;                throw e;&#xA;            }&#xA;            finally&#xA;            {&#xA;                webRequest.GetResponse().GetResponseStream().Close();&#xA;                responseReader.Close();&#xA;                responseReader = null;&#xA;            }&#xA;&#xA;            return responseData;&#xA;        }&#xA;    }&#xA;&#xA;&#x9;&#xA;public static class Snippet&#xA;{&#xA;&#x9;public static void func(System.String ConsumerKey, System.String ConsumerSecret, ref System.String Token, ref System.String TokenSecret, ref System.String AuthorizationLink)&#xA;&#x9;{&#xA;&#x9;&#x9;OAuthLinkedIn _oauth = new OAuthLinkedIn();&#xA;&#x9;&#x9;_oauth._consumerKey=ConsumerKey;&#xA;&#x9;&#x9;_oauth._consumerSecret = ConsumerSecret;&#xA;&#x9;&#x9;_oauth.getRequestToken();&#xA;&#x9;&#x9;Token = _oauth.Token;&#xA;&#x9;&#x9;TokenSecret = _oauth.TokenSecret;&#xA;&#x9;&#x9;AuthorizationLink = _oauth.AuthorizationLink;&#xA;&#x9;}&#xA;}"/>
                  <CompiledCode val="
                  <SnippetLanguage val="C"/>
                  <ForCompactFramework val="N"/>
                  <isGuiThreadExecution val="Y"/>
                  <CompileTime HighDateTime="30164107" LowDateTime="2427641295"/>
                  <AssemblyIds val="-279589575,-1292091557,"/>
                  <RetainFocus val="N"/>
                  <Condition val="Y"/>
                  <Modifier val="S"/>
                  <Direction val="C"/>
                </Invoke>
              </LogicLine>
              <LogicLine>
                <STP Buttons="O" DefaultButton="1" ERR_LOG_DEF_CHG="N" Exp="2" FlowIsn="17" IMG_DEF_CHG="N" Image="E" Mode="W" TTL_DEF_CHG="N" TitleTxt="Warning" VR_DISP="B">
                  <AppendToErrorLog val="N"/>
                  <Condition Exp="3"/>
                  <Modifier val="B"/>
                  <Direction val="C"/>
                </STP>
              </LogicLine>
              <LogicLine>
                <CallTask FlowIsn="18">
                  <OperationType val="T"/>
                  <TaskID comp="-1" obj="2"/>
                  <Lock val="N"/>
                  <Wait val="Y"/>
                  <SyncData val="N"/>
                  <RetainFocus val="N"/>
                  <Condition Exp="6"/>
                  <Modifier val="B"/>
                  <Direction val="C"/>
                </CallTask>
              </LogicLine>
              <LogicLine>
                <Invoke FlowIsn="19">
                  <OperationType val="."/>
                  <TaskID comp="-1"/>
                  <Lock val="N"/>
                  <Arguments>
                    <Argument>
                      <id val="7"/>
                      <Skip val="N"/>
                      <DotNetType val="void"/>
                    </Argument>
                    <Argument>
                      <id val="8"/>
                      <Variable val="1"/>
                      <Skip val="N"/>
                      <Name val="ConsumerKey"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                    <Argument>
                      <id val="9"/>
                      <Variable val="2"/>
                      <Skip val="N"/>
                      <Name val="ConsumerSecret"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                    <Argument>
                      <id val="10"/>
                      <Variable val="3"/>
                      <Skip val="N"/>
                      <Name val="Token"/>
                      <VT_Type val="4"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                    <Argument>
                      <id val="11"/>
                      <Variable val="4"/>
                      <Skip val="N"/>
                      <Name val="TokenSecret"/>
                      <VT_Type val="4"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                    <Argument>
                      <id val="12"/>
                      <Variable val="6"/>
                      <Skip val="N"/>
                      <Name val="Verifier"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                  </Arguments>
                  <Wait val="Y"/>
                  <SyncData val="N"/>
                  <FunctionName val="func"/>
                  <SnippetCode val="using System;&#xA;using System.Security.Cryptography;&#xA;using System.Collections.Generic;&#xA;using System.Collections.Specialized;&#xA;using System.Web;&#xA;using System.Net;&#xA;using System.Text;&#xA;using System.IO;&#xA;&#xA;&#xA;//using System.Configuration;&#xA;//using System.Data;&#xA;//using System.Configuration;&#xA;&#xA;&#xA; &#xA;    public class oAuthBase&#xA;    {&#xA;&#xA;        /// &lt;summary>&#xA;        /// Provides a predefined set of algorithms that are supported officially by the protocol&#xA;        /// &lt;/summary>&#xA;        public enum SignatureTypes&#xA;        {&#xA;            HMACSHA1,&#xA;            PLAINTEXT,&#xA;            RSASHA1&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Provides an internal structure to sort the query parameter&#xA;        /// &lt;/summary>&#xA;        protected class QueryParameter&#xA;        {&#xA;            private string name = null;&#xA;            private string value = null;&#xA;&#xA;            public QueryParameter(string name, string value)&#xA;            {&#xA;                this.name = name;&#xA;                this.value = value;&#xA;            }&#xA;&#xA;            public string Name&#xA;            {&#xA;                get { return name; }&#xA;            }&#xA;&#xA;            public string Value&#xA;            {&#xA;                get { return value; }&#xA;            }&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Comparer class used to perform the sorting of the query parameters&#xA;        /// &lt;/summary>&#xA;        protected class QueryParameterComparer : IComparer&lt;QueryParameter>&#xA;        {&#xA;&#xA;            #region IComparer&lt;QueryParameter> Members&#xA;&#xA;            public int Compare(QueryParameter x, QueryParameter y)&#xA;            {&#xA;                if (x.Name == y.Name)&#xA;                {&#xA;                    return string.Compare(x.Value, y.Value);&#xA;                }&#xA;                else&#xA;                {&#xA;                    return string.Compare(x.Name, y.Name);&#xA;                }&#xA;            }&#xA;&#xA;            #endregion&#xA;        }&#xA;&#xA;        protected const string OAuthVersion = &quot;1.0&quot;;&#xA;        protected const string OAuthParameterPrefix = &quot;oauth_&quot;;&#xA;&#xA;        //&#xA;        // List of know and used oauth parameters' names&#xA;        //        &#xA;        protected const string OAuthConsumerKeyKey = &quot;oauth_consumer_key&quot;;&#xA;        protected const string OAuthCallbackKey = &quot;oauth_callback&quot;;&#xA;        protected const string OAuthVersionKey = &quot;oauth_version&quot;;&#xA;        protected const string OAuthSignatureMethodKey = &quot;oauth_signature_method&quot;;&#xA;        protected const string OAuthSignatureKey = &quot;oauth_signature&quot;;&#xA;        protected const string OAuthTimestampKey = &quot;oauth_timestamp&quot;;&#xA;        protected const string OAuthNonceKey = &quot;oauth_nonce&quot;;&#xA;        protected const string OAuthTokenKey = &quot;oauth_token&quot;;&#xA;        protected const string oAauthVerifier = &quot;oauth_verifier&quot;;&#xA;        protected const string OAuthTokenSecretKey = &quot;oauth_token_secret&quot;;&#xA;&#xA;        protected const string HMACSHA1SignatureType = &quot;HMAC-SHA1&quot;;&#xA;        protected const string PlainTextSignatureType = &quot;PLAINTEXT&quot;;&#xA;        protected const string RSASHA1SignatureType = &quot;RSA-SHA1&quot;;&#xA;&#xA;        protected Random random = new Random();&#xA;&#xA;        private string oauth_verifier;&#xA;        public string Verifier { get { return oauth_verifier; } set { oauth_verifier = value; } }&#xA;&#xA;&#xA;        protected string unreservedChars = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.~&quot;;&#xA;&#xA;        /// &lt;summary>&#xA;        /// Helper function to compute a hash value&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;hashAlgorithm&quot;>The hashing algoirhtm used. If that algorithm needs some initialization, like HMAC and its derivatives, they should be initialized prior to passing it to this function&lt;/param>&#xA;        /// &lt;param name=&quot;data&quot;>The data to hash&lt;/param>&#xA;        /// &lt;returns>a Base64 string of the hash value&lt;/returns>&#xA;        private string ComputeHash(HashAlgorithm hashAlgorithm, string data)&#xA;        {&#xA;            if (hashAlgorithm == null)&#xA;            {&#xA;                throw new ArgumentNullException(&quot;hashAlgorithm&quot;);&#xA;            }&#xA;&#xA;            if (string.IsNullOrEmpty(data))&#xA;            {&#xA;                throw new ArgumentNullException(&quot;data&quot;);&#xA;            }&#xA;&#xA;            byte[] dataBuffer = System.Text.Encoding.ASCII.GetBytes(data);&#xA;            byte[] hashBytes = hashAlgorithm.ComputeHash(dataBuffer);&#xA;&#xA;            return Convert.ToBase64String(hashBytes);&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Internal function to cut out all non oauth query string parameters (all parameters not begining with &quot;oauth_&quot;)&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;parameters&quot;>The query string part of the Url&lt;/param>&#xA;        /// &lt;returns>A list of QueryParameter each containing the parameter name and value&lt;/returns>&#xA;        private List&lt;QueryParameter> GetQueryParameters(string parameters)&#xA;        {&#xA;            if (parameters.StartsWith(&quot;?&quot;))&#xA;            {&#xA;                parameters = parameters.Remove(0, 1);&#xA;            }&#xA;&#xA;            List&lt;QueryParameter> result = new List&lt;QueryParameter>();&#xA;&#xA;            if (!string.IsNullOrEmpty(parameters))&#xA;            {&#xA;                string[] p = parameters.Split('&amp;');&#xA;                foreach (string s in p)&#xA;                {&#xA;                    if (!string.IsNullOrEmpty(s) &amp;&amp; !s.StartsWith(OAuthParameterPrefix))&#xA;                    {&#xA;                        if (s.IndexOf('=') > -1)&#xA;                        {&#xA;                            string[] temp = s.Split('=');&#xA;                            result.Add(new QueryParameter(temp[0], temp[1]));&#xA;                        }&#xA;                        else&#xA;                        {&#xA;                            result.Add(new QueryParameter(s, string.Empty));&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;&#xA;            return result;&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// This is a different Url Encode implementation since the default .NET one outputs the percent encoding in lower case.&#xA;        /// While this is not a problem with the percent encoding spec, it is used in upper case throughout OAuth&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;value&quot;>The value to Url encode&lt;/param>&#xA;        /// &lt;returns>Returns a Url encoded string&lt;/returns>&#xA;        public string UrlEncode(string value)&#xA;        {&#xA;            StringBuilder result = new StringBuilder();&#xA;&#xA;            foreach (char symbol in value)&#xA;            {&#xA;                if (unreservedChars.IndexOf(symbol) != -1)&#xA;                {&#xA;                    result.Append(symbol);&#xA;                }&#xA;                else&#xA;                {&#xA;                    result.Append('%' + String.Format(&quot;{0:X2}&quot;, (int)symbol));&#xA;                }&#xA;            }&#xA;&#xA;            return result.ToString();&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Normalizes the request parameters according to the spec&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;parameters&quot;>The list of parameters already sorted&lt;/param>&#xA;        /// &lt;returns>a string representing the normalized parameters&lt;/returns>&#xA;        protected string NormalizeRequestParameters(IList&lt;QueryParameter> parameters)&#xA;        {&#xA;            StringBuilder sb = new StringBuilder();&#xA;            QueryParameter p = null;&#xA;            for (int i = 0; i &lt; parameters.Count; i++)&#xA;            {&#xA;                p = parameters[i];&#xA;                sb.AppendFormat(&quot;{0}={1}&quot;, p.Name, p.Value);&#xA;&#xA;                if (i &lt; parameters.Count - 1)&#xA;                {&#xA;                    sb.Append(&quot;&amp;&quot;);&#xA;                }&#xA;            }&#xA;&#xA;            return sb.ToString();&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Generate the signature base that is used to produce the signature&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;url&quot;>The full url that needs to be signed including its non OAuth url parameters&lt;/param>&#xA;        /// &lt;param name=&quot;consumerKey&quot;>The consumer key&lt;/param>        &#xA;        /// &lt;param name=&quot;token&quot;>The token, if available. If not available pass null or an empty string&lt;/param>&#xA;        /// &lt;param name=&quot;tokenSecret&quot;>The token secret, if available. If not available pass null or an empty string&lt;/param>&#xA;        /// &lt;param name=&quot;httpMethod&quot;>The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)&lt;/param>&#xA;        /// &lt;param name=&quot;signatureType&quot;>The signature type. To use the default values use &lt;see cref=&quot;OAuthBase.SignatureTypes&quot;>OAuthBase.SignatureTypes&lt;/see>.&lt;/param>&#xA;        /// &lt;returns>The signature base&lt;/returns>&#xA;        public string GenerateSignatureBase(Uri url, string consumerKey, string token, string tokenSecret, string httpMethod, string timeStamp, string nonce, string callback, string signatureType, out string normalizedUrl, out string normalizedRequestParameters)&#xA;        {&#xA;            if (token == null)&#xA;            {&#xA;                token = string.Empty;&#xA;            }&#xA;&#xA;            if (tokenSecret == null)&#xA;            {&#xA;                tokenSecret = string.Empty;&#xA;            }&#xA;&#xA;            if (string.IsNullOrEmpty(consumerKey))&#xA;            {&#xA;                throw new ArgumentNullException(&quot;consumerKey&quot;);&#xA;            }&#xA;&#xA;            if (string.IsNullOrEmpty(httpMethod))&#xA;            {&#xA;                throw new ArgumentNullException(&quot;httpMethod&quot;);&#xA;            }&#xA;&#xA;            if (string.IsNullOrEmpty(signatureType))&#xA;            {&#xA;                throw new ArgumentNullException(&quot;signatureType&quot;);&#xA;            }&#xA;&#xA;            normalizedUrl = null;&#xA;            normalizedRequestParameters = null;&#xA;&#xA;            List&lt;QueryParameter> parameters = GetQueryParameters(url.Query);&#xA;            parameters.Add(new QueryParameter(OAuthVersionKey, OAuthVersion));&#xA;            parameters.Add(new QueryParameter(OAuthNonceKey, nonce));&#xA;            parameters.Add(new QueryParameter(OAuthTimestampKey, timeStamp));&#xA;            parameters.Add(new QueryParameter(OAuthSignatureMethodKey, signatureType));&#xA;            parameters.Add(new QueryParameter(OAuthConsumerKeyKey, consumerKey));&#xA;&#xA;            //TODO: Make this less of a hack&#xA;            if (!string.IsNullOrEmpty(callback))&#xA;            {&#xA;                parameters.Add(new QueryParameter(OAuthCallbackKey, UrlEncode(callback)));&#xA;            }&#xA;&#xA;            if (!string.IsNullOrEmpty(token))&#xA;            {&#xA;                parameters.Add(new QueryParameter(OAuthTokenKey, token));&#xA;            }&#xA;&#xA;            if (!string.IsNullOrEmpty(oauth_verifier))&#xA;            {&#xA;                parameters.Add(new QueryParameter(oAauthVerifier, oauth_verifier));&#xA;            }&#xA;&#xA;&#xA;            parameters.Sort(new QueryParameterComparer());&#xA;&#xA;&#xA;            normalizedUrl = string.Format(&quot;{0}://{1}&quot;, url.Scheme, url.Host);&#xA;            if (!((url.Scheme == &quot;http&quot; &amp;&amp; url.Port == 80) || (url.Scheme == &quot;https&quot; &amp;&amp; url.Port == 443)))&#xA;            {&#xA;                normalizedUrl += &quot;:&quot; + url.Port;&#xA;            }&#xA;            normalizedUrl += url.AbsolutePath;&#xA;            normalizedRequestParameters = NormalizeRequestParameters(parameters);&#xA;&#xA;            StringBuilder signatureBase = new StringBuilder();&#xA;            signatureBase.AppendFormat(&quot;{0}&amp;&quot;, httpMethod.ToUpper());&#xA;            signatureBase.AppendFormat(&quot;{0}&amp;&quot;, UrlEncode(normalizedUrl));&#xA;            signatureBase.AppendFormat(&quot;{0}&quot;, UrlEncode(normalizedRequestParameters));&#xA;&#xA;            return signatureBase.ToString();&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Generate the signature value based on the given signature base and hash algorithm&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;signatureBase&quot;>The signature based as produced by the GenerateSignatureBase method or by any other means&lt;/param>&#xA;        /// &lt;param name=&quot;hash&quot;>The hash algorithm used to perform the hashing. If the hashing algorithm requires initialization or a key it should be set prior to calling this method&lt;/param>&#xA;        /// &lt;returns>A base64 string of the hash value&lt;/returns>&#xA;        public string GenerateSignatureUsingHash(string signatureBase, HashAlgorithm hash)&#xA;        {&#xA;            return ComputeHash(hash, signatureBase);&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Generates a signature using the HMAC-SHA1 algorithm&#xA;        /// &lt;/summary>&#x9;&#x9;&#xA;        /// &lt;param name=&quot;url&quot;>The full url that needs to be signed including its non OAuth url parameters&lt;/param>&#xA;        /// &lt;param name=&quot;consumerKey&quot;>The consumer key&lt;/param>&#xA;        /// &lt;param name=&quot;consumerSecret&quot;>The consumer seceret&lt;/param>&#xA;        /// &lt;param name=&quot;token&quot;>The token, if available. If not available pass null or an empty string&lt;/param>&#xA;        /// &lt;param name=&quot;tokenSecret&quot;>The token secret, if available. If not available pass null or an empty string&lt;/param>&#xA;        /// &lt;param name=&quot;httpMethod&quot;>The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)&lt;/param>&#xA;        /// &lt;returns>A base64 string of the hash value&lt;/returns>&#xA;        public string GenerateSignature(Uri url, string consumerKey, string consumerSecret, string token, string tokenSecret, string httpMethod, string timeStamp, string nonce, string callback, out string normalizedUrl, out string normalizedRequestParameters)&#xA;        {&#xA;            return GenerateSignature(url, consumerKey, consumerSecret, token, tokenSecret, httpMethod, timeStamp, nonce, callback, SignatureTypes.HMACSHA1, out normalizedUrl, out normalizedRequestParameters);&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Generates a signature using the specified signatureType &#xA;        /// &lt;/summary>&#x9;&#x9;&#xA;        /// &lt;param name=&quot;url&quot;>The full url that needs to be signed including its non OAuth url parameters&lt;/param>&#xA;        /// &lt;param name=&quot;consumerKey&quot;>The consumer key&lt;/param>&#xA;        /// &lt;param name=&quot;consumerSecret&quot;>The consumer seceret&lt;/param>&#xA;        /// &lt;param name=&quot;token&quot;>The token, if available. If not available pass null or an empty string&lt;/param>&#xA;        /// &lt;param name=&quot;tokenSecret&quot;>The token secret, if available. If not available pass null or an empty string&lt;/param>&#xA;        /// &lt;param name=&quot;httpMethod&quot;>The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)&lt;/param>&#xA;        /// &lt;param name=&quot;signatureType&quot;>The type of signature to use&lt;/param>&#xA;        /// &lt;returns>A base64 string of the hash value&lt;/returns>&#xA;        public string GenerateSignature(Uri url, string consumerKey, string consumerSecret, string token, string tokenSecret, string httpMethod, string timeStamp, string nonce, string callback, SignatureTypes signatureType, out string normalizedUrl, out string normalizedRequestParameters)&#xA;        {&#xA;            normalizedUrl = null;&#xA;            normalizedRequestParameters = null;&#xA;&#xA;            switch (signatureType)&#xA;            {&#xA;                case SignatureTypes.PLAINTEXT:&#xA;                    return HttpUtility.UrlEncode(string.Format(&quot;{0}&amp;{1}&quot;, consumerSecret, tokenSecret));&#xA;                case SignatureTypes.HMACSHA1:&#xA;                    string signatureBase = GenerateSignatureBase(url, consumerKey, token, tokenSecret, httpMethod, timeStamp, nonce, callback, HMACSHA1SignatureType, out normalizedUrl, out normalizedRequestParameters);&#xA;                    HMACSHA1 hmacsha1 = new HMACSHA1();&#xA;                    hmacsha1.Key = Encoding.ASCII.GetBytes(string.Format(&quot;{0}&amp;{1}&quot;, UrlEncode(consumerSecret), string.IsNullOrEmpty(tokenSecret) ? &quot;&quot; : UrlEncode(tokenSecret)));&#xA;&#xA;                    return GenerateSignatureUsingHash(signatureBase, hmacsha1);&#xA;                case SignatureTypes.RSASHA1:&#xA;                    throw new NotImplementedException();&#xA;                default:&#xA;                    throw new ArgumentException(&quot;Unknown signature type&quot;, &quot;signatureType&quot;);&#xA;            }&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Generate the timestamp for the signature        &#xA;        /// &lt;/summary>&#xA;        /// &lt;returns>&lt;/returns>&#xA;&#xA;        public virtual string GenerateTimeStamp()&#xA;        {&#xA;            // Default implementation of UNIX time of the current UTC time&#xA;            TimeSpan ts = DateTime.UtcNow - new DateTime(1970, 1, 1, 0, 0, 0, 0);&#xA;            return Convert.ToInt64(ts.TotalSeconds).ToString();&#xA;        }&#xA;&#xA;        /*&#xA;       public virtual string GenerateTimeStamp() {&#xA;           // Default implementation of UNIX time of the current UTC time&#xA;           TimeSpan ts = DateTime.UtcNow - new DateTime(1970, 1, 1, 0, 0, 0, 0);&#xA;           string timeStamp = ts.TotalSeconds.ToString();&#xA;           timeStamp = timeStamp.Substring(0, timeStamp.IndexOf(&quot;,&quot;));&#xA;           return Convert.ToInt64(timeStamp).ToString(); &#xA;       }*/&#xA;&#xA;        /// &lt;summary>&#xA;        /// Generate a nonce&#xA;        /// &lt;/summary>&#xA;        /// &lt;returns>&lt;/returns>&#xA;        public virtual string GenerateNonce()&#xA;        {&#xA;            // Just a simple implementation of a random number between 123400 and 9999999&#xA;            return random.Next(123400, 9999999).ToString();&#xA;        }&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;&#xA;    public class OAuthLinkedIn : oAuthBase&#xA;    {&#xA;        /*Consumer settings from linkedin*/&#xA;        public string _consumerKey = &quot;&quot;;&#xA;        public string _consumerSecret = &quot;&quot;;&#xA;&#xA;        public enum Method { GET, POST, PUT, DELETE };&#xA;        public const string USER_AGENT = &quot;YourAgent&quot;;&#xA;        public const string REQUEST_TOKEN = &quot;https://api.linkedin.com/uas/oauth/requestToken&quot;;&#xA;        public const string AUTHORIZE = &quot;https://api.linkedin.com/uas/oauth/authorize&quot;;&#xA;        public const string ACCESS_TOKEN = &quot;https://api.linkedin.com/uas/oauth/accessToken&quot;;&#xA;        public const string CALLBACK = &quot;https://api.linkedin.com/uas/oauth/authorize&quot;;&#xA;&#xA;        private string _token = &quot;&quot;;&#xA;        private string _tokenSecret = &quot;&quot;;&#xA;        &#xA;        #region PublicPropertiies&#xA;        public string ConsumerKey { get { return _consumerKey; } set { _consumerKey = value; } }&#xA;        public string ConsumerSecret { get { return _consumerSecret;} set { _consumerSecret = value; } }&#xA;        public string Token { get { return _token; } set { _token = value; } }&#xA;        public string TokenSecret { get { return _tokenSecret; } set { _tokenSecret = value; } }&#xA;        #endregion&#xA;&#xA;        /// &lt;summary>&#xA;        /// Get the linkedin request token using the consumer key and secret.  Also initializes tokensecret&#xA;        /// &lt;/summary>&#xA;        /// &lt;returns>The request token.&lt;/returns>&#xA;        public String getRequestToken() {&#xA;            string ret = null;&#xA;            string response = oAuthWebRequest(Method.POST, REQUEST_TOKEN, String.Empty);&#xA;            if (response.Length > 0)&#xA;            {&#xA;                NameValueCollection qs = HttpUtility.ParseQueryString(response);&#xA;                if (qs[&quot;oauth_token&quot;] != null)&#xA;                {&#xA;                    this.Token = qs[&quot;oauth_token&quot;];&#xA;                    this.TokenSecret = qs[&quot;oauth_token_secret&quot;];&#xA;                    ret = this.Token;&#xA;                }&#xA;            }&#xA;            return ret;        &#xA;        }&#xA;&#xA;&#xA;        /// &lt;summary>&#xA;        /// Get the access token&#xA;        /// &lt;/summary>&#xA;        /// &lt;returns>The access token.&lt;/returns>        &#xA;        public String getAccessToken() {&#xA;            if (string.IsNullOrEmpty(Token) || string.IsNullOrEmpty(Verifier))&#xA;            {&#xA;                Exception e = new Exception(&quot;The request token and verifier were not set&quot;);&#xA;                throw e;&#xA;            }&#xA;&#xA;            string response = oAuthWebRequest(Method.POST, ACCESS_TOKEN, string.Empty);&#xA;&#xA;            if (response.Length > 0)&#xA;            {&#xA;                NameValueCollection qs = HttpUtility.ParseQueryString(response);&#xA;                if (qs[&quot;oauth_token&quot;] != null)&#xA;                {&#xA;                    this.Token = qs[&quot;oauth_token&quot;];&#xA;                }&#xA;                if (qs[&quot;oauth_token_secret&quot;] != null)&#xA;                {&#xA;                    this.TokenSecret = qs[&quot;oauth_token_secret&quot;];&#xA;                }&#xA;            }&#xA;&#xA;            return Token;        &#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Get the link to Linked In's authorization page for this application.&#xA;        /// &lt;/summary>&#xA;        /// &lt;returns>The url with a valid request token, or a null string.&lt;/returns>&#xA;        public string AuthorizationLink&#xA;        {&#xA;            get { return AUTHORIZE + &quot;?oauth_token=&quot; + this.Token; }&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Submit a web request using oAuth.&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;method&quot;>GET or POST&lt;/param>&#xA;        /// &lt;param name=&quot;url&quot;>The full url, including the querystring.&lt;/param>&#xA;        /// &lt;param name=&quot;postData&quot;>Data to post (querystring format)&lt;/param>&#xA;        /// &lt;returns>The web server response.&lt;/returns>&#xA;        public string oAuthWebRequest(Method method, string url, string postData)&#xA;        {&#xA;            string outUrl = &quot;&quot;;&#xA;            string querystring = &quot;&quot;;&#xA;            string ret = &quot;&quot;;&#xA;&#xA;            //Setup postData for signing.&#xA;            //Add the postData to the querystring.&#xA;            if (method == Method.POST)&#xA;            {&#xA;                if (postData.Length > 0)&#xA;                {&#xA;                    //Decode the parameters and re-encode using the oAuth UrlEncode method.&#xA;                    NameValueCollection qs = HttpUtility.ParseQueryString(postData);&#xA;                    postData = &quot;&quot;;&#xA;                    foreach (string key in qs.AllKeys)&#xA;                    {&#xA;                        if (postData.Length > 0)&#xA;                        {&#xA;                            postData += &quot;&amp;&quot;;&#xA;                        }&#xA;                        qs[key] = HttpUtility.UrlDecode(qs[key]);&#xA;                        qs[key] = this.UrlEncode(qs[key]);&#xA;                        postData += key + &quot;=&quot; + qs[key];&#xA;&#xA;                    }&#xA;                    if (url.IndexOf(&quot;?&quot;) > 0)&#xA;                    {&#xA;                        url += &quot;&amp;&quot;;&#xA;                    }&#xA;                    else&#xA;                    {&#xA;                        url += &quot;?&quot;;&#xA;                    }&#xA;                    url += postData;&#xA;                }&#xA;            }&#xA;&#xA;            Uri uri = new Uri(url);&#xA;&#xA;            string nonce = this.GenerateNonce();&#xA;            string timeStamp = this.GenerateTimeStamp();&#xA;            &#xA;            string callback = &quot;&quot;;&#xA;            if (url.ToString().Contains(REQUEST_TOKEN))&#xA;                callback = CALLBACK;&#xA;&#xA;            //Generate Signature&#xA;            string sig = this.GenerateSignature(uri,&#xA;                this.ConsumerKey,&#xA;                this.ConsumerSecret,&#xA;                this.Token,&#xA;                this.TokenSecret,&#xA;                method.ToString(),&#xA;                timeStamp,&#xA;                nonce,&#xA;                callback,&#xA;                out outUrl,&#xA;                out querystring);&#xA;&#xA;&#xA;            querystring += &quot;&amp;oauth_signature=&quot; + HttpUtility.UrlEncode(sig);&#xA;&#xA;            //Convert the querystring to postData&#xA;            if (method == Method.POST)&#xA;            {&#xA;                postData = querystring;&#xA;                querystring = &quot;&quot;;&#xA;            }&#xA;&#xA;            if (querystring.Length > 0)&#xA;            {&#xA;                outUrl += &quot;?&quot;;&#xA;            }&#xA;&#xA;            if (method == Method.POST || method == Method.GET)&#xA;                ret = WebRequest(method, outUrl + querystring, postData);&#xA;                &#xA;            return ret;&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// WebRequestWithPut&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;method&quot;>WebRequestWithPut&lt;/param>&#xA;        /// &lt;param name=&quot;url&quot;>&lt;/param>&#xA;        /// &lt;param name=&quot;postData&quot;>&lt;/param>&#xA;        /// &lt;returns>&lt;/returns>&#xA;        public string APIWebRequest(string method, string url, string postData)&#xA;        {&#xA;            Uri uri = new Uri(url);&#xA;            string nonce = this.GenerateNonce();&#xA;            string timeStamp = this.GenerateTimeStamp();&#xA;&#xA;            string outUrl, querystring;&#xA;&#xA;            //Generate Signature&#xA;            string sig = this.GenerateSignature(uri,&#xA;                this.ConsumerKey,&#xA;                this.ConsumerSecret,&#xA;                this.Token,&#xA;                this.TokenSecret,&#xA;                method,&#xA;                timeStamp,&#xA;                nonce,&#xA;                null,&#xA;                out outUrl,&#xA;                out querystring);&#xA;&#xA;            HttpWebRequest webRequest = null;&#xA;&#xA;            webRequest = System.Net.WebRequest.Create(url) as HttpWebRequest;&#xA;            webRequest.Method = method;&#xA;            webRequest.Credentials = CredentialCache.DefaultCredentials;&#xA;            webRequest.AllowWriteStreamBuffering = true;&#xA;&#xA;            webRequest.PreAuthenticate = true;&#xA;            webRequest.ServicePoint.Expect100Continue = false;&#xA;            ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3;&#xA;&#xA;            webRequest.Headers.Add(&quot;Authorization&quot;, &quot;OAuth realm=\&quot;http://api.linkedin.com/\&quot;,oauth_consumer_key=\&quot;&quot; + this.ConsumerKey + &quot;\&quot;,oauth_token=\&quot;&quot; + this.Token + &quot;\&quot;,oauth_signature_method=\&quot;HMAC-SHA1\&quot;,oauth_signature=\&quot;&quot; + HttpUtility.UrlEncode(sig) + &quot;\&quot;,oauth_timestamp=\&quot;&quot; + timeStamp + &quot;\&quot;,oauth_nonce=\&quot;&quot; + nonce + &quot;\&quot;,oauth_verifier=\&quot;&quot; + this.Verifier + &quot;\&quot;, oauth_version=\&quot;1.0\&quot;&quot;);            &#xA;&#xA;            if (postData != null)&#xA;            {&#xA;                byte[] fileToSend = Encoding.UTF8.GetBytes(postData);&#xA;                webRequest.ContentLength = fileToSend.Length;&#xA;&#xA;                Stream reqStream = webRequest.GetRequestStream();&#xA;&#xA;                reqStream.Write(fileToSend, 0, fileToSend.Length);&#xA;                reqStream.Close();&#xA;            }&#xA;&#xA;            string returned = WebResponseGet(webRequest);&#xA;&#xA;            return returned;&#xA;        }&#xA;&#xA;&#xA;        /// &lt;summary>&#xA;        /// Web Request Wrapper&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;method&quot;>Http Method&lt;/param>&#xA;        /// &lt;param name=&quot;url&quot;>Full url to the web resource&lt;/param>&#xA;        /// &lt;param name=&quot;postData&quot;>Data to post in querystring format&lt;/param>&#xA;        /// &lt;returns>The web server response.&lt;/returns>&#xA;        public string WebRequest(Method method, string url, string postData)&#xA;        {&#xA;            HttpWebRequest webRequest = null;&#xA;            StreamWriter requestWriter = null;&#xA;            string responseData = &quot;&quot;;&#xA;&#xA;            webRequest = System.Net.WebRequest.Create(url) as HttpWebRequest;&#xA;            webRequest.Method = method.ToString();&#xA;            webRequest.ServicePoint.Expect100Continue = false;&#xA;            webRequest.UserAgent  = USER_AGENT;&#xA;            webRequest.Timeout = 20000;&#xA;&#xA;            if (method == Method.POST)&#xA;            {&#xA;                webRequest.ContentType = &quot;application/x-www-form-urlencoded&quot;;&#xA;&#xA;                requestWriter = new StreamWriter(webRequest.GetRequestStream());&#xA;                try&#xA;                {&#xA;                    requestWriter.Write(postData);&#xA;                }&#xA;                catch&#xA;                {&#xA;                    throw;&#xA;                }&#xA;                finally&#xA;                {&#xA;                    requestWriter.Close();&#xA;                    requestWriter = null;&#xA;                }&#xA;            }&#xA;&#xA;            responseData = WebResponseGet(webRequest);&#xA;&#xA;            webRequest = null;&#xA;&#xA;            return responseData;&#xA;&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Process the web response.&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;webRequest&quot;>The request object.&lt;/param>&#xA;        /// &lt;returns>The response data.&lt;/returns>&#xA;        public string WebResponseGet(HttpWebRequest webRequest)&#xA;        {&#xA;            StreamReader responseReader = null;&#xA;            string responseData = &quot;&quot;;&#xA;&#x9;&#x9;&#xA;            try&#xA;            {&#xA;                responseReader = new StreamReader(webRequest.GetResponse().GetResponseStream());&#xA;                responseData = responseReader.ReadToEnd();&#xA;            }&#xA;            catch (Exception e)&#xA;            {&#xA;                throw e;&#xA;            }&#xA;            finally&#xA;            {&#xA;                webRequest.GetResponse().GetResponseStream().Close();&#xA;                responseReader.Close();&#xA;                responseReader = null;&#xA;            }&#xA;&#xA;            return responseData;&#xA;        }&#xA;    }&#xA;&#xA;&#x9;&#xA;public static class Snippet&#xA;{&#xA;&#x9;public static void func(System.String ConsumerKey, System.String ConsumerSecret, ref System.String Token, ref System.String TokenSecret, System.String Verifier)&#xA;&#x9;{&#xA;&#x9;&#x9;OAuthLinkedIn _oauth = new OAuthLinkedIn();&#xA;&#x9;&#x9;_oauth.ConsumerKey=ConsumerKey;&#xA;&#x9;&#x9;_oauth.ConsumerSecret = ConsumerSecret;&#xA;&#x9;&#x9;_oauth.Token = Token;&#xA;&#x9;&#x9;_oauth.TokenSecret = TokenSecret;&#xA;&#x9;&#x9;_oauth.Verifier = Verifier;&#xA;&#xA;&#x9;&#x9;_oauth.getAccessToken();&#xA;&#xA;&#x9;&#x9;Token=_oauth.Token;&#xA;&#x9;&#x9;TokenSecret=_oauth.TokenSecret;&#x9;&#x9;&#xA;&#x9;}&#xA;}"/>
                  <CompiledCode val="
                  <SnippetLanguage val="C"/>
                  <ForCompactFramework val="N"/>
                  <isGuiThreadExecution val="Y"/>
                  <CompileTime HighDateTime="30164107" LowDateTime="2429911295"/>
                  <AssemblyIds val="-279589575,-1292091557,"/>
                  <RetainFocus val="N"/>
                  <Condition val="Y"/>
                  <Modifier val="S"/>
                  <Direction val="C"/>
                </Invoke>
              </LogicLine>
              <LogicLine>
                <STP Buttons="O" DefaultButton="1" ERR_LOG_DEF_CHG="N" Exp="2" FlowIsn="20" IMG_DEF_CHG="N" Image="E" Mode="W" TTL_DEF_CHG="N" TitleTxt="Warning" VR_DISP="B">
                  <AppendToErrorLog val="N"/>
                  <Condition Exp="3"/>
                  <Modifier val="B"/>
                  <Direction val="C"/>
                </STP>
              </LogicLine>
              <LogicLine>
                <Remark FlowIsn="21">
                  <Type val="2"/>
                  <Text val=" "/>
                </Remark>
              </LogicLine>
            </LogicLines>
          </LogicUnit>
          <LogicUnit id="12" propagate="78">
            <Level val="H"/>
            <Type val="U"/>
            <_DspTemplate val="0"/>
            <_HeaderPosition val="22"/>
            <Scope val="S"/>
            <EngineDirective val="S"/>
            <ShowMessage val="Y"/>
            <Condition val="89"/>
            <Event>
              <EventType val="U"/>
              <PublicObject comp="-1" obj="2"/>
            </Event>
            <Expanded val="1"/>
            <LogicLines>
              <LogicLine>
                <Invoke FlowIsn="22">
                  <OperationType val="."/>
                  <TaskID comp="-1"/>
                  <Lock val="N"/>
                  <Arguments>
                    <Argument>
                      <id val="13"/>
                      <Variable val="10"/>
                      <Skip val="N"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                    <Argument>
                      <id val="14"/>
                      <Variable val="1"/>
                      <Skip val="N"/>
                      <Name val="ConsumerKey"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                    <Argument>
                      <id val="15"/>
                      <Variable val="2"/>
                      <Skip val="N"/>
                      <Name val="ConsumerSecret"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                    <Argument>
                      <id val="16"/>
                      <Variable val="3"/>
                      <Skip val="N"/>
                      <Name val="Token"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                    <Argument>
                      <id val="17"/>
                      <Variable val="4"/>
                      <Skip val="N"/>
                      <Name val="TokenSecret"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                    <Argument>
                      <id val="18"/>
                      <Variable val="6"/>
                      <Skip val="N"/>
                      <Name val="Verifier"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                    <Argument>
                      <id val="19"/>
                      <Variable val="7"/>
                      <Skip val="N"/>
                      <Name val="id"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                    <Argument>
                      <id val="20"/>
                      <Expression val="10"/>
                      <Skip val="N"/>
                      <Name val="urlSuffix"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                  </Arguments>
                  <Wait val="Y"/>
                  <SyncData val="N"/>
                  <ReturnValue val="10"/>
                  <FunctionName val="func"/>
                  <SnippetCode val="using System;&#xA;using System.Security.Cryptography;&#xA;using System.Collections.Generic;&#xA;using System.Collections.Specialized;&#xA;using System.Web;&#xA;using System.Net;&#xA;using System.Text;&#xA;using System.IO;&#xA; &#xA;    public class oAuthBase&#xA;    {&#xA;&#xA;        /// &lt;summary>&#xA;        /// Provides a predefined set of algorithms that are supported officially by the protocol&#xA;        /// &lt;/summary>&#xA;        public enum SignatureTypes&#xA;        {&#xA;            HMACSHA1,&#xA;            PLAINTEXT,&#xA;            RSASHA1&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Provides an internal structure to sort the query parameter&#xA;        /// &lt;/summary>&#xA;        protected class QueryParameter&#xA;        {&#xA;            private string name = null;&#xA;            private string value = null;&#xA;&#xA;            public QueryParameter(string name, string value)&#xA;            {&#xA;                this.name = name;&#xA;                this.value = value;&#xA;            }&#xA;&#xA;            public string Name&#xA;            {&#xA;                get { return name; }&#xA;            }&#xA;&#xA;            public string Value&#xA;            {&#xA;                get { return value; }&#xA;            }&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Comparer class used to perform the sorting of the query parameters&#xA;        /// &lt;/summary>&#xA;        protected class QueryParameterComparer : IComparer&lt;QueryParameter>&#xA;        {&#xA;&#xA;            #region IComparer&lt;QueryParameter> Members&#xA;&#xA;            public int Compare(QueryParameter x, QueryParameter y)&#xA;            {&#xA;                if (x.Name == y.Name)&#xA;                {&#xA;                    return string.Compare(x.Value, y.Value);&#xA;                }&#xA;                else&#xA;                {&#xA;                    return string.Compare(x.Name, y.Name);&#xA;                }&#xA;            }&#xA;&#xA;            #endregion&#xA;        }&#xA;&#xA;        protected const string OAuthVersion = &quot;1.0&quot;;&#xA;        protected const string OAuthParameterPrefix = &quot;oauth_&quot;;&#xA;&#xA;        //&#xA;        // List of know and used oauth parameters' names&#xA;        //        &#xA;        protected const string OAuthConsumerKeyKey = &quot;oauth_consumer_key&quot;;&#xA;        protected const string OAuthCallbackKey = &quot;oauth_callback&quot;;&#xA;        protected const string OAuthVersionKey = &quot;oauth_version&quot;;&#xA;        protected const string OAuthSignatureMethodKey = &quot;oauth_signature_method&quot;;&#xA;        protected const string OAuthSignatureKey = &quot;oauth_signature&quot;;&#xA;        protected const string OAuthTimestampKey = &quot;oauth_timestamp&quot;;&#xA;        protected const string OAuthNonceKey = &quot;oauth_nonce&quot;;&#xA;        protected const string OAuthTokenKey = &quot;oauth_token&quot;;&#xA;        protected const string oAauthVerifier = &quot;oauth_verifier&quot;;&#xA;        protected const string OAuthTokenSecretKey = &quot;oauth_token_secret&quot;;&#xA;&#xA;        protected const string HMACSHA1SignatureType = &quot;HMAC-SHA1&quot;;&#xA;        protected const string PlainTextSignatureType = &quot;PLAINTEXT&quot;;&#xA;        protected const string RSASHA1SignatureType = &quot;RSA-SHA1&quot;;&#xA;&#xA;        protected Random random = new Random();&#xA;&#xA;        private string oauth_verifier;&#xA;        public string Verifier { get { return oauth_verifier; } set { oauth_verifier = value; } }&#xA;&#xA;&#xA;        protected string unreservedChars = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.~&quot;;&#xA;&#xA;        /// &lt;summary>&#xA;        /// Helper function to compute a hash value&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;hashAlgorithm&quot;>The hashing algoirhtm used. If that algorithm needs some initialization, like HMAC and its derivatives, they should be initialized prior to passing it to this function&lt;/param>&#xA;        /// &lt;param name=&quot;data&quot;>The data to hash&lt;/param>&#xA;        /// &lt;returns>a Base64 string of the hash value&lt;/returns>&#xA;        private string ComputeHash(HashAlgorithm hashAlgorithm, string data)&#xA;        {&#xA;            if (hashAlgorithm == null)&#xA;            {&#xA;                throw new ArgumentNullException(&quot;hashAlgorithm&quot;);&#xA;            }&#xA;&#xA;            if (string.IsNullOrEmpty(data))&#xA;            {&#xA;                throw new ArgumentNullException(&quot;data&quot;);&#xA;            }&#xA;&#xA;            byte[] dataBuffer = System.Text.Encoding.ASCII.GetBytes(data);&#xA;            byte[] hashBytes = hashAlgorithm.ComputeHash(dataBuffer);&#xA;&#xA;            return Convert.ToBase64String(hashBytes);&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Internal function to cut out all non oauth query string parameters (all parameters not begining with &quot;oauth_&quot;)&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;parameters&quot;>The query string part of the Url&lt;/param>&#xA;        /// &lt;returns>A list of QueryParameter each containing the parameter name and value&lt;/returns>&#xA;        private List&lt;QueryParameter> GetQueryParameters(string parameters)&#xA;        {&#xA;            if (parameters.StartsWith(&quot;?&quot;))&#xA;            {&#xA;                parameters = parameters.Remove(0, 1);&#xA;            }&#xA;&#xA;            List&lt;QueryParameter> result = new List&lt;QueryParameter>();&#xA;&#xA;            if (!string.IsNullOrEmpty(parameters))&#xA;            {&#xA;                string[] p = parameters.Split('&amp;');&#xA;                foreach (string s in p)&#xA;                {&#xA;                    if (!string.IsNullOrEmpty(s) &amp;&amp; !s.StartsWith(OAuthParameterPrefix))&#xA;                    {&#xA;                        if (s.IndexOf('=') > -1)&#xA;                        {&#xA;                            string[] temp = s.Split('=');&#xA;                            result.Add(new QueryParameter(temp[0], temp[1]));&#xA;                        }&#xA;                        else&#xA;                        {&#xA;                            result.Add(new QueryParameter(s, string.Empty));&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;&#xA;            return result;&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// This is a different Url Encode implementation since the default .NET one outputs the percent encoding in lower case.&#xA;        /// While this is not a problem with the percent encoding spec, it is used in upper case throughout OAuth&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;value&quot;>The value to Url encode&lt;/param>&#xA;        /// &lt;returns>Returns a Url encoded string&lt;/returns>&#xA;        public string UrlEncode(string value)&#xA;        {&#xA;            StringBuilder result = new StringBuilder();&#xA;&#xA;            foreach (char symbol in value)&#xA;            {&#xA;                if (unreservedChars.IndexOf(symbol) != -1)&#xA;                {&#xA;                    result.Append(symbol);&#xA;                }&#xA;                else&#xA;                {&#xA;                    result.Append('%' + String.Format(&quot;{0:X2}&quot;, (int)symbol));&#xA;                }&#xA;            }&#xA;&#xA;            return result.ToString();&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Normalizes the request parameters according to the spec&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;parameters&quot;>The list of parameters already sorted&lt;/param>&#xA;        /// &lt;returns>a string representing the normalized parameters&lt;/returns>&#xA;        protected string NormalizeRequestParameters(IList&lt;QueryParameter> parameters)&#xA;        {&#xA;            StringBuilder sb = new StringBuilder();&#xA;            QueryParameter p = null;&#xA;            for (int i = 0; i &lt; parameters.Count; i++)&#xA;            {&#xA;                p = parameters[i];&#xA;                sb.AppendFormat(&quot;{0}={1}&quot;, p.Name, p.Value);&#xA;&#xA;                if (i &lt; parameters.Count - 1)&#xA;                {&#xA;                    sb.Append(&quot;&amp;&quot;);&#xA;                }&#xA;            }&#xA;&#xA;            return sb.ToString();&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Generate the signature base that is used to produce the signature&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;url&quot;>The full url that needs to be signed including its non OAuth url parameters&lt;/param>&#xA;        /// &lt;param name=&quot;consumerKey&quot;>The consumer key&lt;/param>        &#xA;        /// &lt;param name=&quot;token&quot;>The token, if available. If not available pass null or an empty string&lt;/param>&#xA;        /// &lt;param name=&quot;tokenSecret&quot;>The token secret, if available. If not available pass null or an empty string&lt;/param>&#xA;        /// &lt;param name=&quot;httpMethod&quot;>The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)&lt;/param>&#xA;        /// &lt;param name=&quot;signatureType&quot;>The signature type. To use the default values use &lt;see cref=&quot;OAuthBase.SignatureTypes&quot;>OAuthBase.SignatureTypes&lt;/see>.&lt;/param>&#xA;        /// &lt;returns>The signature base&lt;/returns>&#xA;        public string GenerateSignatureBase(Uri url, string consumerKey, string token, string tokenSecret, string httpMethod, string timeStamp, string nonce, string callback, string signatureType, out string normalizedUrl, out string normalizedRequestParameters)&#xA;        {&#xA;            if (token == null)&#xA;            {&#xA;                token = string.Empty;&#xA;            }&#xA;&#xA;            if (tokenSecret == null)&#xA;            {&#xA;                tokenSecret = string.Empty;&#xA;            }&#xA;&#xA;            if (string.IsNullOrEmpty(consumerKey))&#xA;            {&#xA;                throw new ArgumentNullException(&quot;consumerKey&quot;);&#xA;            }&#xA;&#xA;            if (string.IsNullOrEmpty(httpMethod))&#xA;            {&#xA;                throw new ArgumentNullException(&quot;httpMethod&quot;);&#xA;            }&#xA;&#xA;            if (string.IsNullOrEmpty(signatureType))&#xA;            {&#xA;                throw new ArgumentNullException(&quot;signatureType&quot;);&#xA;            }&#xA;&#xA;            normalizedUrl = null;&#xA;            normalizedRequestParameters = null;&#xA;&#xA;            List&lt;QueryParameter> parameters = GetQueryParameters(url.Query);&#xA;            parameters.Add(new QueryParameter(OAuthVersionKey, OAuthVersion));&#xA;            parameters.Add(new QueryParameter(OAuthNonceKey, nonce));&#xA;            parameters.Add(new QueryParameter(OAuthTimestampKey, timeStamp));&#xA;            parameters.Add(new QueryParameter(OAuthSignatureMethodKey, signatureType));&#xA;            parameters.Add(new QueryParameter(OAuthConsumerKeyKey, consumerKey));&#xA;&#xA;            //TODO: Make this less of a hack&#xA;            if (!string.IsNullOrEmpty(callback))&#xA;            {&#xA;                parameters.Add(new QueryParameter(OAuthCallbackKey, UrlEncode(callback)));&#xA;            }&#xA;&#xA;            if (!string.IsNullOrEmpty(token))&#xA;            {&#xA;                parameters.Add(new QueryParameter(OAuthTokenKey, token));&#xA;            }&#xA;&#xA;            if (!string.IsNullOrEmpty(oauth_verifier))&#xA;            {&#xA;                parameters.Add(new QueryParameter(oAauthVerifier, oauth_verifier));&#xA;            }&#xA;&#xA;&#xA;            parameters.Sort(new QueryParameterComparer());&#xA;&#xA;&#xA;            normalizedUrl = string.Format(&quot;{0}://{1}&quot;, url.Scheme, url.Host);&#xA;            if (!((url.Scheme == &quot;http&quot; &amp;&amp; url.Port == 80) || (url.Scheme == &quot;https&quot; &amp;&amp; url.Port == 443)))&#xA;            {&#xA;                normalizedUrl += &quot;:&quot; + url.Port;&#xA;            }&#xA;            normalizedUrl += url.AbsolutePath;&#xA;            normalizedRequestParameters = NormalizeRequestParameters(parameters);&#xA;&#xA;            StringBuilder signatureBase = new StringBuilder();&#xA;            signatureBase.AppendFormat(&quot;{0}&amp;&quot;, httpMethod.ToUpper());&#xA;            signatureBase.AppendFormat(&quot;{0}&amp;&quot;, UrlEncode(normalizedUrl));&#xA;            signatureBase.AppendFormat(&quot;{0}&quot;, UrlEncode(normalizedRequestParameters));&#xA;&#xA;            return signatureBase.ToString();&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Generate the signature value based on the given signature base and hash algorithm&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;signatureBase&quot;>The signature based as produced by the GenerateSignatureBase method or by any other means&lt;/param>&#xA;        /// &lt;param name=&quot;hash&quot;>The hash algorithm used to perform the hashing. If the hashing algorithm requires initialization or a key it should be set prior to calling this method&lt;/param>&#xA;        /// &lt;returns>A base64 string of the hash value&lt;/returns>&#xA;        public string GenerateSignatureUsingHash(string signatureBase, HashAlgorithm hash)&#xA;        {&#xA;            return ComputeHash(hash, signatureBase);&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Generates a signature using the HMAC-SHA1 algorithm&#xA;        /// &lt;/summary>&#x9;&#x9;&#xA;        /// &lt;param name=&quot;url&quot;>The full url that needs to be signed including its non OAuth url parameters&lt;/param>&#xA;        /// &lt;param name=&quot;consumerKey&quot;>The consumer key&lt;/param>&#xA;        /// &lt;param name=&quot;consumerSecret&quot;>The consumer seceret&lt;/param>&#xA;        /// &lt;param name=&quot;token&quot;>The token, if available. If not available pass null or an empty string&lt;/param>&#xA;        /// &lt;param name=&quot;tokenSecret&quot;>The token secret, if available. If not available pass null or an empty string&lt;/param>&#xA;        /// &lt;param name=&quot;httpMethod&quot;>The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)&lt;/param>&#xA;        /// &lt;returns>A base64 string of the hash value&lt;/returns>&#xA;        public string GenerateSignature(Uri url, string consumerKey, string consumerSecret, string token, string tokenSecret, string httpMethod, string timeStamp, string nonce, string callback, out string normalizedUrl, out string normalizedRequestParameters)&#xA;        {&#xA;            return GenerateSignature(url, consumerKey, consumerSecret, token, tokenSecret, httpMethod, timeStamp, nonce, callback, SignatureTypes.HMACSHA1, out normalizedUrl, out normalizedRequestParameters);&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Generates a signature using the specified signatureType &#xA;        /// &lt;/summary>&#x9;&#x9;&#xA;        /// &lt;param name=&quot;url&quot;>The full url that needs to be signed including its non OAuth url parameters&lt;/param>&#xA;        /// &lt;param name=&quot;consumerKey&quot;>The consumer key&lt;/param>&#xA;        /// &lt;param name=&quot;consumerSecret&quot;>The consumer seceret&lt;/param>&#xA;        /// &lt;param name=&quot;token&quot;>The token, if available. If not available pass null or an empty string&lt;/param>&#xA;        /// &lt;param name=&quot;tokenSecret&quot;>The token secret, if available. If not available pass null or an empty string&lt;/param>&#xA;        /// &lt;param name=&quot;httpMethod&quot;>The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)&lt;/param>&#xA;        /// &lt;param name=&quot;signatureType&quot;>The type of signature to use&lt;/param>&#xA;        /// &lt;returns>A base64 string of the hash value&lt;/returns>&#xA;        public string GenerateSignature(Uri url, string consumerKey, string consumerSecret, string token, string tokenSecret, string httpMethod, string timeStamp, string nonce, string callback, SignatureTypes signatureType, out string normalizedUrl, out string normalizedRequestParameters)&#xA;        {&#xA;            normalizedUrl = null;&#xA;            normalizedRequestParameters = null;&#xA;&#xA;            switch (signatureType)&#xA;            {&#xA;                case SignatureTypes.PLAINTEXT:&#xA;                    return HttpUtility.UrlEncode(string.Format(&quot;{0}&amp;{1}&quot;, consumerSecret, tokenSecret));&#xA;                case SignatureTypes.HMACSHA1:&#xA;                    string signatureBase = GenerateSignatureBase(url, consumerKey, token, tokenSecret, httpMethod, timeStamp, nonce, callback, HMACSHA1SignatureType, out normalizedUrl, out normalizedRequestParameters);&#xA;                    HMACSHA1 hmacsha1 = new HMACSHA1();&#xA;                    hmacsha1.Key = Encoding.ASCII.GetBytes(string.Format(&quot;{0}&amp;{1}&quot;, UrlEncode(consumerSecret), string.IsNullOrEmpty(tokenSecret) ? &quot;&quot; : UrlEncode(tokenSecret)));&#xA;&#xA;                    return GenerateSignatureUsingHash(signatureBase, hmacsha1);&#xA;                case SignatureTypes.RSASHA1:&#xA;                    throw new NotImplementedException();&#xA;                default:&#xA;                    throw new ArgumentException(&quot;Unknown signature type&quot;, &quot;signatureType&quot;);&#xA;            }&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Generate the timestamp for the signature        &#xA;        /// &lt;/summary>&#xA;        /// &lt;returns>&lt;/returns>&#xA;&#xA;        public virtual string GenerateTimeStamp()&#xA;        {&#xA;            // Default implementation of UNIX time of the current UTC time&#xA;            TimeSpan ts = DateTime.UtcNow - new DateTime(1970, 1, 1, 0, 0, 0, 0);&#xA;            return Convert.ToInt64(ts.TotalSeconds).ToString();&#xA;        }&#xA;&#xA;        /*&#xA;       public virtual string GenerateTimeStamp() {&#xA;           // Default implementation of UNIX time of the current UTC time&#xA;           TimeSpan ts = DateTime.UtcNow - new DateTime(1970, 1, 1, 0, 0, 0, 0);&#xA;           string timeStamp = ts.TotalSeconds.ToString();&#xA;           timeStamp = timeStamp.Substring(0, timeStamp.IndexOf(&quot;,&quot;));&#xA;           return Convert.ToInt64(timeStamp).ToString(); &#xA;       }*/&#xA;&#xA;        /// &lt;summary>&#xA;        /// Generate a nonce&#xA;        /// &lt;/summary>&#xA;        /// &lt;returns>&lt;/returns>&#xA;        public virtual string GenerateNonce()&#xA;        {&#xA;            // Just a simple implementation of a random number between 123400 and 9999999&#xA;            return random.Next(123400, 9999999).ToString();&#xA;        }&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;&#xA;    public class OAuthLinkedIn : oAuthBase&#xA;    {&#xA;        /*Consumer settings from linkedin*/&#xA;        public string _consumerKey = &quot;&quot;;&#xA;        public string _consumerSecret = &quot;&quot;;&#xA;&#xA;        public enum Method { GET, POST, PUT, DELETE };&#xA;        public const string USER_AGENT = &quot;YourAgent&quot;;&#xA;        public const string REQUEST_TOKEN = &quot;https://api.linkedin.com/uas/oauth/requestToken&quot;;&#xA;        public const string AUTHORIZE = &quot;https://api.linkedin.com/uas/oauth/authorize&quot;;&#xA;        public const string ACCESS_TOKEN = &quot;https://api.linkedin.com/uas/oauth/accessToken&quot;;&#xA;        public const string CALLBACK = &quot;https://api.linkedin.com/uas/oauth/authorize&quot;;&#xA;&#xA;        private string _token = &quot;&quot;;&#xA;        private string _tokenSecret = &quot;&quot;;&#xA;        &#xA;        #region PublicPropertiies&#xA;        public string ConsumerKey { get { return _consumerKey; } set { _consumerKey = value; } }&#xA;        public string ConsumerSecret { get { return _consumerSecret;} set { _consumerSecret = value; } }&#xA;        public string Token { get { return _token; } set { _token = value; } }&#xA;        public string TokenSecret { get { return _tokenSecret; } set { _tokenSecret = value; } }&#xA;        #endregion&#xA;&#xA;        /// &lt;summary>&#xA;        /// Get the linkedin request token using the consumer key and secret.  Also initializes tokensecret&#xA;        /// &lt;/summary>&#xA;        /// &lt;returns>The request token.&lt;/returns>&#xA;        public String getRequestToken() {&#xA;            string ret = null;&#xA;            string response = oAuthWebRequest(Method.POST, REQUEST_TOKEN, String.Empty);&#xA;            if (response.Length > 0)&#xA;            {&#xA;                NameValueCollection qs = HttpUtility.ParseQueryString(response);&#xA;                if (qs[&quot;oauth_token&quot;] != null)&#xA;                {&#xA;                    this.Token = qs[&quot;oauth_token&quot;];&#xA;                    this.TokenSecret = qs[&quot;oauth_token_secret&quot;];&#xA;                    ret = this.Token;&#xA;                }&#xA;            }&#xA;            return ret;        &#xA;        }&#xA;&#xA;&#xA;        /// &lt;summary>&#xA;        /// Get the access token&#xA;        /// &lt;/summary>&#xA;        /// &lt;returns>The access token.&lt;/returns>        &#xA;        public String getAccessToken() {&#xA;            if (string.IsNullOrEmpty(Token) || string.IsNullOrEmpty(Verifier))&#xA;            {&#xA;                Exception e = new Exception(&quot;The request token and verifier were not set&quot;);&#xA;                throw e;&#xA;            }&#xA;&#xA;            string response = oAuthWebRequest(Method.POST, ACCESS_TOKEN, string.Empty);&#xA;&#xA;            if (response.Length > 0)&#xA;            {&#xA;                NameValueCollection qs = HttpUtility.ParseQueryString(response);&#xA;                if (qs[&quot;oauth_token&quot;] != null)&#xA;                {&#xA;                    this.Token = qs[&quot;oauth_token&quot;];&#xA;                }&#xA;                if (qs[&quot;oauth_token_secret&quot;] != null)&#xA;                {&#xA;                    this.TokenSecret = qs[&quot;oauth_token_secret&quot;];&#xA;                }&#xA;            }&#xA;&#xA;            return Token;        &#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Get the link to Linked In's authorization page for this application.&#xA;        /// &lt;/summary>&#xA;        /// &lt;returns>The url with a valid request token, or a null string.&lt;/returns>&#xA;        public string AuthorizationLink&#xA;        {&#xA;            get { return AUTHORIZE + &quot;?oauth_token=&quot; + this.Token; }&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Submit a web request using oAuth.&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;method&quot;>GET or POST&lt;/param>&#xA;        /// &lt;param name=&quot;url&quot;>The full url, including the querystring.&lt;/param>&#xA;        /// &lt;param name=&quot;postData&quot;>Data to post (querystring format)&lt;/param>&#xA;        /// &lt;returns>The web server response.&lt;/returns>&#xA;        public string oAuthWebRequest(Method method, string url, string postData)&#xA;        {&#xA;            string outUrl = &quot;&quot;;&#xA;            string querystring = &quot;&quot;;&#xA;            string ret = &quot;&quot;;&#xA;&#xA;            //Setup postData for signing.&#xA;            //Add the postData to the querystring.&#xA;            if (method == Method.POST)&#xA;            {&#xA;                if (postData.Length > 0)&#xA;                {&#xA;                    //Decode the parameters and re-encode using the oAuth UrlEncode method.&#xA;                    NameValueCollection qs = HttpUtility.ParseQueryString(postData);&#xA;                    postData = &quot;&quot;;&#xA;                    foreach (string key in qs.AllKeys)&#xA;                    {&#xA;                        if (postData.Length > 0)&#xA;                        {&#xA;                            postData += &quot;&amp;&quot;;&#xA;                        }&#xA;                        qs[key] = HttpUtility.UrlDecode(qs[key]);&#xA;                        qs[key] = this.UrlEncode(qs[key]);&#xA;                        postData += key + &quot;=&quot; + qs[key];&#xA;&#xA;                    }&#xA;                    if (url.IndexOf(&quot;?&quot;) > 0)&#xA;                    {&#xA;                        url += &quot;&amp;&quot;;&#xA;                    }&#xA;                    else&#xA;                    {&#xA;                        url += &quot;?&quot;;&#xA;                    }&#xA;                    url += postData;&#xA;                }&#xA;            }&#xA;&#xA;            Uri uri = new Uri(url);&#xA;&#xA;            string nonce = this.GenerateNonce();&#xA;            string timeStamp = this.GenerateTimeStamp();&#xA;            &#xA;            string callback = &quot;&quot;;&#xA;            if (url.ToString().Contains(REQUEST_TOKEN))&#xA;                callback = CALLBACK;&#xA;&#xA;            //Generate Signature&#xA;            string sig = this.GenerateSignature(uri,&#xA;                this.ConsumerKey,&#xA;                this.ConsumerSecret,&#xA;                this.Token,&#xA;                this.TokenSecret,&#xA;                method.ToString(),&#xA;                timeStamp,&#xA;                nonce,&#xA;                callback,&#xA;                out outUrl,&#xA;                out querystring);&#xA;&#xA;&#xA;            querystring += &quot;&amp;oauth_signature=&quot; + HttpUtility.UrlEncode(sig);&#xA;&#xA;            //Convert the querystring to postData&#xA;            if (method == Method.POST)&#xA;            {&#xA;                postData = querystring;&#xA;                querystring = &quot;&quot;;&#xA;            }&#xA;&#xA;            if (querystring.Length > 0)&#xA;            {&#xA;                outUrl += &quot;?&quot;;&#xA;            }&#xA;&#xA;            if (method == Method.POST || method == Method.GET)&#xA;                ret = WebRequest(method, outUrl + querystring, postData);&#xA;                &#xA;            return ret;&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// WebRequestWithPut&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;method&quot;>WebRequestWithPut&lt;/param>&#xA;        /// &lt;param name=&quot;url&quot;>&lt;/param>&#xA;        /// &lt;param name=&quot;postData&quot;>&lt;/param>&#xA;        /// &lt;returns>&lt;/returns>&#xA;        public string APIWebRequest(string method, string url, string postData)&#xA;        {&#xA;            Uri uri = new Uri(url);&#xA;            string nonce = this.GenerateNonce();&#xA;            string timeStamp = this.GenerateTimeStamp();&#xA;&#xA;            string outUrl, querystring;&#xA;&#xA;            //Generate Signature&#xA;            string sig = this.GenerateSignature(uri,&#xA;                this.ConsumerKey,&#xA;                this.ConsumerSecret,&#xA;                this.Token,&#xA;                this.TokenSecret,&#xA;                method,&#xA;                timeStamp,&#xA;                nonce,&#xA;                null,&#xA;                out outUrl,&#xA;                out querystring);&#xA;&#xA;            HttpWebRequest webRequest = null;&#xA;&#xA;            webRequest = System.Net.WebRequest.Create(url) as HttpWebRequest;&#xA;            webRequest.Method = method;&#xA;            webRequest.Credentials = CredentialCache.DefaultCredentials;&#xA;            webRequest.AllowWriteStreamBuffering = true;&#xA;&#xA;            webRequest.PreAuthenticate = true;&#xA;            webRequest.ServicePoint.Expect100Continue = false;&#xA;            ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3;&#xA;&#xA;            webRequest.Headers.Add(&quot;Authorization&quot;, &quot;OAuth realm=\&quot;http://api.linkedin.com/\&quot;,oauth_consumer_key=\&quot;&quot; + this.ConsumerKey + &quot;\&quot;,oauth_token=\&quot;&quot; + this.Token + &quot;\&quot;,oauth_signature_method=\&quot;HMAC-SHA1\&quot;,oauth_signature=\&quot;&quot; + HttpUtility.UrlEncode(sig) + &quot;\&quot;,oauth_timestamp=\&quot;&quot; + timeStamp + &quot;\&quot;,oauth_nonce=\&quot;&quot; + nonce + &quot;\&quot;,oauth_verifier=\&quot;&quot; + this.Verifier + &quot;\&quot;, oauth_version=\&quot;1.0\&quot;&quot;);            &#xA;&#xA;            if (postData != null)&#xA;            {&#xA;                byte[] fileToSend = Encoding.UTF8.GetBytes(postData);&#xA;                webRequest.ContentLength = fileToSend.Length;&#xA;&#xA;                Stream reqStream = webRequest.GetRequestStream();&#xA;&#xA;                reqStream.Write(fileToSend, 0, fileToSend.Length);&#xA;                reqStream.Close();&#xA;            }&#xA;&#xA;            string returned = WebResponseGet(webRequest);&#xA;&#xA;            return returned;&#xA;        }&#xA;&#xA;&#xA;        /// &lt;summary>&#xA;        /// Web Request Wrapper&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;method&quot;>Http Method&lt;/param>&#xA;        /// &lt;param name=&quot;url&quot;>Full url to the web resource&lt;/param>&#xA;        /// &lt;param name=&quot;postData&quot;>Data to post in querystring format&lt;/param>&#xA;        /// &lt;returns>The web server response.&lt;/returns>&#xA;        public string WebRequest(Method method, string url, string postData)&#xA;        {&#xA;            HttpWebRequest webRequest = null;&#xA;            StreamWriter requestWriter = null;&#xA;            string responseData = &quot;&quot;;&#xA;&#xA;            webRequest = System.Net.WebRequest.Create(url) as HttpWebRequest;&#xA;            webRequest.Method = method.ToString();&#xA;            webRequest.ServicePoint.Expect100Continue = false;&#xA;            webRequest.UserAgent  = USER_AGENT;&#xA;            webRequest.Timeout = 20000;&#xA;&#xA;            if (method == Method.POST)&#xA;            {&#xA;                webRequest.ContentType = &quot;application/x-www-form-urlencoded&quot;;&#xA;&#xA;                requestWriter = new StreamWriter(webRequest.GetRequestStream());&#xA;                try&#xA;                {&#xA;                    requestWriter.Write(postData);&#xA;                }&#xA;                catch&#xA;                {&#xA;                    throw;&#xA;                }&#xA;                finally&#xA;                {&#xA;                    requestWriter.Close();&#xA;                    requestWriter = null;&#xA;                }&#xA;            }&#xA;&#xA;            responseData = WebResponseGet(webRequest);&#xA;&#xA;            webRequest = null;&#xA;&#xA;            return responseData;&#xA;&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Process the web response.&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;webRequest&quot;>The request object.&lt;/param>&#xA;        /// &lt;returns>The response data.&lt;/returns>&#xA;        public string WebResponseGet(HttpWebRequest webRequest)&#xA;        {&#xA;            StreamReader responseReader = null;&#xA;            string responseData = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#xA;            try&#xA;            {&#xA;                responseReader = new StreamReader(webRequest.GetResponse().GetResponseStream());&#xA;                responseData = responseReader.ReadToEnd();&#xA;            }&#xA;            catch (Exception e)&#xA;            {&#xA;                throw e;&#xA;            }&#xA;            finally&#xA;            {&#xA;                webRequest.GetResponse().GetResponseStream().Close();&#xA;                responseReader.Close();&#xA;                responseReader = null;&#xA;            }&#xA;&#xA;            return responseData;&#xA;        }&#xA;    }&#xA;&#xA;&#x9;&#xA;public static class Snippet&#xA;{&#xA;&#x9;public static System.String func(System.String ConsumerKey, System.String ConsumerSecret, System.String Token, System.String TokenSecret, System.String Verifier, System.String id, System.String urlSuffix)&#xA;&#x9;{&#xA;      try&#xA;&#x9;  {&#xA;&#x9;&#x9;OAuthLinkedIn _oauth = new OAuthLinkedIn();&#xA;&#x9;&#x9;_oauth.ConsumerKey=ConsumerKey;&#xA;&#x9;&#x9;_oauth.ConsumerSecret = ConsumerSecret;&#xA;&#x9;&#x9;_oauth.Token = Token;&#xA;&#x9;&#x9;_oauth.TokenSecret = TokenSecret;&#xA;&#x9;&#x9;_oauth.Verifier = Verifier;&#xA;&#x9;&#x9;return _oauth.APIWebRequest(&quot;GET&quot;, &quot;https://api.linkedin.com/v1/people/&quot; + id.Trim() + urlSuffix.Trim(), null);&#xA;&#x9;  }&#xA;      catch (Exception exp)&#xA;      {&#x9;&#xA;&#x9;&#x9;return &quot;Exception: &quot; + exp.Message; &#xA;&#x9;  }&#xA;&#x9;}&#xA;}"/>
                  <CompiledCode val="TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0KJAAAAAAAAABQRQAATAEDAM7tIk4AAAAAAAAAAOAAAiELAQgAADAAAAAgAAAAAAAAnk8AAAAgAAAAYAAAAABAAAAgAAAAEAAABAAAAAAAAAAEAAAAAAAAAACgAAAAEAAAAAAAAAMAQIUAABAAABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAFBPAABLAAAAAGAAAKgCAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAApC8AAAAgAAAAMAAAABAAAAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAKgCAAAAYAAAABAAAABAAAAAAAAAAAAAAAAAAABAAABALnJlbG9jAAAMAAAAAIAAAAAQAAAAUAAAAAAAAAAAAAAAAAAAQAAAQgwLAAA4CIAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHgJ7EQAABCoiAgN9EQAABCoAAAATMAIAPAAAAAEAABEDLQtyAQAAcHMEAAAKegQoBQAACiwLch0AAHBzBAAACnooBgAACgRvBwAACgoDBm8IAAAKCwcoCQAACioTMAQAuAAAAAIAABEDcicAAHBvCgAACiwKAxYXbwsAAAoQAXMMAAAKCgMoBQAACjqOAAAAAxeNEQAAARMEEQQWHyadEQRvDQAACgsHEwUWEwYrZxEFEQaaDAgoBQAACi1TCHIrAABwbwoAAAotRggfPW8OAAAKFTEqCBeNEQAAARMHEQcWHz2dEQdvDQAACg0GCRaaCReacw4AAAZvDwAACisRBgh+EAAACnMOAAAGbw8AAAoRBhdYEwYRBhEFjmkykQYqEzAEAGQAAAADAAARcxEAAAoKAwwWDStICAlvEgAACgsCexIAAAQHbw4AAAoVLgoGB28TAAAKJisjBh8ljBEAAAFyOQAAcAeMEwAAASgUAAAKKBUAAApvFgAACiYJF1gNCQhvFwAACjKvBm8YAAAKKhMwBABXAAAABAAAEXMRAAAKChQLFgwrOwMIbxkAAAoLBnJHAABwB28PAAAGB28QAAAGbxoAAAomCANvGwAAChdZLwwGclcAAHBvFgAACiYIF1gMCANvGwAACjK8Bm8YAAAKKgATMAQA+wEAAAUAABEFLQd+EAAAChADDgQtB34QAAAKEAQEKAUAAAosC3JbAABwcwQAAAp6DgUoBQAACiwLcnMAAHBzBAAACnoOCSgFAAAKLAtyiQAAcHMEAAAKeg4KFFEOCxRRAgNvHAAACigEAAAGCgZypQAAcHLBAABwcw4AAAZvDwAACgZyyQAAcA4Hcw4AAAZvDwAACgZy4QAAcA4Gcw4AAAZvDwAACgZyAQEAcA4Jcw4AAAZvDwAACgZyLwEAcARzDgAABm8PAAAKDggoBQAACi0YBnJVAQBwAg4IKAUAAAZzDgAABm8PAAAKBSgFAAAKLREGcnMBAHAFcw4AAAZvDwAACgJ7EQAABCgFAAAKLRYGcosBAHACexEAAARzDgAABm8PAAAKBnMSAAAGbx0AAAoOCnKpAQBwA28eAAAKA28fAAAKKCAAAApRA28eAAAKcr0BAHAoIQAACiwKA28iAAAKH1AuOQNvHgAACnLHAQBwKCEAAAosDQNvIgAACiC7AQAALhoOCiVQctMBAHADbyIAAAqMEwAAASgjAAAKUQ4KJVADbyQAAAooJQAAClEOCwIGKAYAAAZRcxEAAAoLB3LXAQBwDgVvJgAACm8nAAAKJgdy1wEAcAIOClAoBQAABm8nAAAKJgdy4QEAcAIOC1AoBQAABm8nAAAKJgdvGAAACiomAgQDKAMAAAYqAAAAAzANABsAAAAAAAAAAgMEBQ4EDgUOBg4HDggOCRYOCg4LKAoAAAYqABMwDACuAAAABgAAEQ4LFFEODBRRDgoMCEUDAAAAFQAAAAIAAAB7AAAAK39y6QEAcAUOBSggAAAKKCgAAAoqAgMEDgQOBQ4GDgcOCA4JcvkBAHAOCw4MKAcAAAYKcykAAAoLBygGAAAKcukBAHACBSgFAAAGDgUoBQAACi0KAg4FKAUAAAYrBXINAgBwKCAAAApvBwAACm8qAAAKAgYHKAgAAAYqcysAAAp6cg8CAHByiQAAcHMsAAAKegAAEzAJADAAAAAHAAARKC0AAAogsgcAABcXFhYWFnMuAAAKKC8AAAoKEgAoMAAACigxAAAKCxIBKDIAAAoqEzADAB4AAAAIAAARAnsQAAAEIAjiAQAgf5aYAG8zAAAKChIAKDQAAAoqdgJzNQAACn0QAAAEAnI9AgBwfRIAAAQCKDYAAAoqVgIoNgAACgIDfRcAAAQCBH0YAAAEKh4CexcAAAQqHgJ7GAAABCreA28PAAAGBG8PAAAGKCEAAAosEgNvEAAABgRvEAAABig3AAAKKgNvDwAABgRvDwAABig3AAAKKh4CKDYAAAoqHgJ7HgAABCoiAgN9HgAABCoeAnsfAAAEKiICA30fAAAEKh4CeyAAAAQqIgIDfSAAAAQqHgJ7IQAABCoiAgN9IQAABCoAABMwBABcAAAACQAAERQKAhdyxAIAcH4QAAAKKB4AAAYLB28XAAAKFjE9Byg4AAAKDAhycwEAcG85AAAKLCkCCHJzAQBwbzkAAAooGAAABgIIciQDAHBvOQAACigaAAAGAigXAAAGCgYqEzAEAIwAAAAKAAARAigXAAAGKAUAAAotDQIoAQAABigFAAAKLA1ySgMAcHM6AAAKCgZ6AhdyogMAcH4QAAAKKB4AAAYLB28XAAAKFjFDByg4AAAKDAhycwEAcG85AAAKLBECCHJzAQBwbzkAAAooGAAABghyJAMAcG85AAAKLBECCHIkAwBwbzkAAAooGgAABgIoFwAABipGcgAEAHACKBcAAAYoJQAACioAABMwDACdAQAACwAAEXINAgBwCnINAgBwC3INAgBwDAMXQMcAAAAFbxcAAAoWPrsAAAAFKDgAAAoNcg0CAHAQAwlvOwAAChMKFhMLK2URChELmhMEBW8XAAAKFjENBXJXAABwKCUAAAoQAwkRBAkRBG85AAAKKDwAAApvPQAACgkRBAIJEQRvOQAACigFAAAGbz0AAAoFEQRydAQAcAkRBG85AAAKKD4AAAoQAxELF1gTCxELEQqOaTKTBHInAABwbz8AAAoWMQ8EclcAAHAoJQAAChACKw0EcicAAHAoJQAAChACBAUoJQAAChACBHNAAAAKEwUCbwwAAAYTBgJvCwAABhMHcg0CAHATCARvGAAACnLEAgBwb0EAAAosB3J4BABwEwgCEQUCKBMAAAYCKBUAAAYCKBcAAAYCKBkAAAYDjAcAAAJvGAAAChEHEQYRCBIAEgEoCQAABhMJB3LSBABwEQkoKAAACihCAAAKCwMXMwkHEANyDQIAcAsHbxcAAAoWMQwGcicAAHAoJQAACgoDFy4DAy0QAgMGByglAAAKBSggAAAGDAgqAAAAEzAMAGQBAAAMAAARBHNAAAAKCgJvDAAABgsCbwsAAAYMAgYCKBMAAAYCKBUAAAYCKBcAAAYCKBkAAAYDCAcUEgMSBCgJAAAGEwUUEwYEKEMAAAp1CQAAARMGEQYDb0QAAAoRBihFAAAKb0YAAAoRBhdvRwAAChEGF29IAAAKEQZvSQAAChZvSgAACh8wKEsAAAoRBm9MAAAKcvYEAHAfDY0OAAABEwoRChZyEgUAcKIRChcCKBMAAAaiEQoYcooFAHCiEQoZAigXAAAGohEKGnKqBQBwohEKGxEFKCgAAAqiEQocchgGAHCiEQodCKIRCh5yQAYAcKIRCh8JB6IRCh8KcmAGAHCiEQofCwIoAQAABqIRCh8McoYGAHCiEQooTQAACm9OAAAKBSw3KE8AAAoFbwcAAAoTBxEGEQeOaWpvUAAAChEGb1EAAAoTCBEIEQcWEQeOaW9SAAAKEQhvUwAACgIRBighAAAGEwkRCSobMAIAhwAAAA0AABEUChQLcg0CAHAMBChDAAAKdQkAAAEKBgOMBwAAAm8YAAAKb0QAAAoGb0kAAAoWb0oAAAoGcrQGAHBvVAAACgYgIE4AAG9VAAAKAxczLgZyyAYAcG9WAAAKBm9RAAAKc1cAAAoLBwVvWAAACt4DJv4a3gkHb1kAAAoUC9wCBighAAAGDBQKCCoAARwAAAAAZAAJbQADAQAAAQIAZAAOcgAJAAAAABswAgBCAAAADgAAERQKcg0CAHALA29aAAAKb1sAAApzXAAACgoGb10AAAoL3gMMCHreGQNvWgAACm9bAAAKb1MAAAoGb14AAAoUCtwHKgAAARwAAAAACAAaIgADHgAAAQIACAAfJwAZAAAAAM4Ccg0CAHB9HgAABAJyDQIAcH0fAAAEAnINAgBwfSAAAAQCcg0CAHB9IQAABAIoDQAABiobMAUAZwAAAA8AABFzIgAABgoGAm8UAAAGBgNvFgAABgYEbxgAAAYGBW8aAAAGBg4EbwIAAAYGcgwHAHByFAcAcA4Fb18AAAoOBm9fAAAKKEIAAAoUbx8AAAYM3hQLclwHAHAHb2AAAAooJQAACgzeAAgqAAEQAAAAAAAAUVEAFB4AAAFCU0pCAQABAAAAAAAMAAAAdjIuMC41MDcyNwAAAAAFAGwAAABECgAAI34AALAKAAAcCwAAI1N0cmluZ3MAAAAAzBUAAHQHAAAjVVMAQB0AABAAAAAjR1VJRAAAAFAdAACQBQAAI0Jsb2IAAAAAAAAAAgAAAVcfogkJAgAAAPoBMwAWAAABAAAAKwAAAAgAAAAmAAAAIwAAAEMAAAABAAAAYAAAABsAAAACAAAADwAAAAMAAAAIAAAADQAAAAQAAAABAAAAAwAAAAQAAAAAAAoAAQAAAAAABgCDAHwABgCKAHwABgCqAI8ABgDKAXwABgAuAhECBgBIAo8ABgBsAo8ACgCPAnwACgCmBJsEBgC7BZwFBgBSBjIGBgByBjIGBgCZBnwABgCvBnwABgDQBsQGBgDsBnwABgAVB3wABgAyB8QGBgBRB3wABgCPB48ADgADCPgHBgANAxECBgAPCBECBgAqCHwABgBCCHwABgBUCHwABgBoCHwABgCZCHwACgDDCKQIBgDoCHwACgCQBJsECgAsCZsECgA8CZsECgCiCZsECgDWCZsECgDqCZsECgAUCpsEBgBZCk8KBgCnCk8KBgC0Ck8KCgC/CpsEBgDpCk8KBgD2Ck8KAAAAAAEAAAAAAAEAAQABABAAFwAAAAUAAQABAAIBAAAhAAAACQATAA4ABAAQADAAAAAFABcADgAEABAAPwAAAAUAGQARAAEAEABWAAAACAAZABMAAgEAAGQAAAAJACIAIwCBARAAawAAAAUAJwAjAFSAtgARAFSAwwARAFSA2AARAFSA7AARAFSA/QARAFSADQERAFSAJQERAFSANwERAFSASQERAFSAVwERAFSAZQERAFSAdAERAFSAiAERAFSAngERAFSAtQERAAQA0QGXAQEA2AERAAQAAQIRAAYGBQP5AVaADQP8AVaAFgP8AVaAIAP8AQEAKAMRAAEALQMRAFaAWQMRAFaAZAMRAFaAcgMRAFaAfAMRAFaAiQMRAAYAkgMRAAYAnwMRAAEArwMRAAEAtgMRAAYGBQP5AVaAAwVaA1aABwVaA1aADAVaA1aAEAVaA1AgAAAAAIYI5wGbAQEAWCAAAAAAhgj0AZ8BAQBkIAAAAACBADwCpAECAKwgAAAAAIEATwKrAQQAcCEAAAAAhgBiArUBBQDgIQAAAACEAHQCugEGAEQiAAAAAIYAkwLEAQcASyQAAAAAhgCpAtYBEgBYJAAAAACGAMQCxAEUAIAkAAAAAIYAxALdAR8APCUAAAAAxgHWApsBKwB4JQAAAADGAegCmwErAKIlAAAAAIYY9gLxASsAwCUAAAAAhhj2Ag8CKwDWJQAAAACGCDMDmwEtAN4lAAAAAIYIPAObAS0A5iUAAAAA5gFRAxUCLQAeJgAAAACGGPYC8QEvACYmAAAAAIYIwwObAS8ALiYAAAAAhgjTA58BLwA3JgAAAACGCOMDmwEwAD8mAAAAAIYI9gOfATAASCYAAAAAhggJBJsBMQBQJgAAAACGCBMEnwExAFkmAAAAAIYIHQSbATIAYSYAAAAAhggtBJ8BMgBsJgAAAACGAD0EmwEzANQmAAAAAIYATQSbATMAbCcAAAAAhghcBJsBMwCAJwAAAACGAHIERQMzACwpAAAAAIYAggRNAzYAnCoAAAAAhgCQBEUDOQBMKwAAAACGALUEVAM8ALgrAAAAAIYY9gLxAT0A7CsAAAAAlgAXBWMDPQAAAAEALQMAAAEAHAUAAAIAKgUAAAEALwUAAAEALQMAAAEALwUAAAEAOgUAAAIAPgUAAAMASgUAAAQAUAUAAAUAXAUAAAYAZwUAAAcAcQUAAAgAdwUAAAkAgAUCAAoAjgUCAAsAyAUAAAEA5AUAAAIA8gUAAAEAOgUAAAIAPgUAAAMA9wUAAAQASgUAAAUAUAUAAAYAXAUAAAcAZwUAAAgAcQUAAAkAdwUCAAoAjgUCAAsAyAUAAAEAOgUAAAIAPgUAAAMA9wUAAAQASgUAAAUAUAUAAAYAXAUAAAcAZwUAAAgAcQUAAAkAdwUAAAoAgAUCAAsAjgUCAAwAyAUAAAEAKAMAAAIALQMAAAEABgYAAAIACAYAAAEALQMAAAEALQMAAAEALQMAAAEALQMAAAEACgYAAAIAOgUAAAMAEQYAAAEACgYAAAIAOgUAAAMAEQYAAAEACgYAAAIAOgUAAAMAEQYAAAEAGgYAAAEAxAQAAAIA0AQAAAMA3wQAAAQA5QQAAAUA/AIAAAYAJQYAAAcAKAYFAAYAUQD2AvEBWQD2Am4DYQD2AvEBaQD2Ap8BcQC2BnMDeQDZBngDeQDjBn0DKQA8AoMDgQD0BooDcQADB5cDcQAOB5wDFAD2AvEBcQAaB6kDcQAgB7ADFAAoB7UDcQAsBxEAkQD2AvEBcQBAB9ADkQBKB9UDcQBXB9sDcQBeB+EDkQBKB+cDcQBlB+0DCQBwB5sBHAB5BwAEkQCCBwYEJACdB+0DQQCnB5sBFACxBx0EQQC2B5sBQQDBB5sBcQBXBycEcQDKBy4EQQDWB+0DcQBeBzQEQQDfB5sBcQBeBzsEcQDwB5sBkQCCB0EEqQBiAlwEsQD2AvEBuQAiCGEEwQD2AvEByQD2Ag8C0QBdCG8E0QD2AnQE0QBxCH8E2QCACIgEgQCRCIwE4QBwB5sBIQCfCJcEmQBwB5sBIQD2AvEBCQD2AvEBcQBRA6EEqQDXCKcE6QB5B7UB8QD2Ap8B6QDyCLwEqQD+CFwE6QAICQ8CcQBeB8EEcQAgB8kEQQD2Ap8BcQARCZcDcQBeB84E+QAaCecE+QAhCZ8BAQFJCe0E+QBgCfMESQBwCfoE+QCOCfoESQCvCf8EEQHACfoEGQH/CQUF+QAoCgwFcQBeBxIF6QAoBw8CeQA0CngD+QA9ChgF+QBgCh0FMQFxCiMFMQF3CvEBSQB9Cp8B+QCLCm4D+QCXCp8BOQH2Aj8FQQFxCp8BQQF3CvEB+QDLCk8FSQHXCh0FUQH2Aj8FWQEBC5sBWQF3CvEBcQALC5sB8QAQC5sBDgAEABQADgAIABsADgAMACgADgAQAE0ADgAUAGoADgAYAIUADgAcALIADgAgANEADgAkAPAADgAoAAcBDgAsAB4BDgAwADsBDgA0AGABDgA4AHMBDgA8AIYBCABQAAACCABUAAUCCABYAAoCDgBkAB0CDgBoADACDgBsAI8CDgBwAOgCDgB0AI8CCACMAAACCACQAAUCCACUAAoCCACYAF4DLgATAGYFLgAbAG8FkAO7A/EDFQRIBGcEkQSdBK0EtATVBCsFRgVVBV4FAgABAAQAAgAGAAQAAAD8AvUBAABGA/UBAABLA/UBAADEBPUBAADQBPUBAADfBPUBAADlBPUBAADxBPUBAgABAAMAAQACAAMAAgAPAAUAAgAQAAcAAgATAAkAAQAUAAkAAgAVAAsAAQAWAAsAAQAYAA0AAgAXAA0AAgAZAA8AAQAaAA8AAgAdABEACgCiA/kDDgQEgAAAAAAAAAAAAAAAAAAAAACQBgAAAgAAAAAAAAAAAAAAAQBzAAAAAAACAAAAAAAAAAAAAAABAHwAAAAAAAIAAAAAAAAAAAAAAFME+AcAAAAAAwACAAQAAgAFAAIABwAGAAAAAAAAPE1vZHVsZT4AcjBtdXFmdy0uZGxsAG9BdXRoQmFzZQBTaWduYXR1cmVUeXBlcwBRdWVyeVBhcmFtZXRlcgBRdWVyeVBhcmFtZXRlckNvbXBhcmVyAE9BdXRoTGlua2VkSW4ATWV0aG9kAFNuaXBwZXQAbXNjb3JsaWIAU3lzdGVtAE9iamVjdABFbnVtAFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljAElDb21wYXJlcmAxAE9BdXRoVmVyc2lvbgBPQXV0aFBhcmFtZXRlclByZWZpeABPQXV0aENvbnN1bWVyS2V5S2V5AE9BdXRoQ2FsbGJhY2tLZXkAT0F1dGhWZXJzaW9uS2V5AE9BdXRoU2lnbmF0dXJlTWV0aG9kS2V5AE9BdXRoU2lnbmF0dXJlS2V5AE9BdXRoVGltZXN0YW1wS2V5AE9BdXRoTm9uY2VLZXkAT0F1dGhUb2tlbktleQBvQWF1dGhWZXJpZmllcgBPQXV0aFRva2VuU2VjcmV0S2V5AEhNQUNTSEExU2lnbmF0dXJlVHlwZQBQbGFpblRleHRTaWduYXR1cmVUeXBlAFJTQVNIQTFTaWduYXR1cmVUeXBlAFJhbmRvbQByYW5kb20Ab2F1dGhfdmVyaWZpZXIAZ2V0X1ZlcmlmaWVyAHNldF9WZXJpZmllcgB1bnJlc2VydmVkQ2hhcnMAU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeQBIYXNoQWxnb3JpdGhtAENvbXB1dGVIYXNoAExpc3RgMQBHZXRRdWVyeVBhcmFtZXRlcnMAVXJsRW5jb2RlAElMaXN0YDEATm9ybWFsaXplUmVxdWVzdFBhcmFtZXRlcnMAVXJpAEdlbmVyYXRlU2lnbmF0dXJlQmFzZQBHZW5lcmF0ZVNpZ25hdHVyZVVzaW5nSGFzaABHZW5lcmF0ZVNpZ25hdHVyZQBHZW5lcmF0ZVRpbWVTdGFtcABHZW5lcmF0ZU5vbmNlAC5jdG9yAFZlcmlmaWVyAHZhbHVlX18ASE1BQ1NIQTEAUExBSU5URVhUAFJTQVNIQTEAbmFtZQB2YWx1ZQBnZXRfTmFtZQBnZXRfVmFsdWUATmFtZQBWYWx1ZQBDb21wYXJlAFVTRVJfQUdFTlQAUkVRVUVTVF9UT0tFTgBBVVRIT1JJWkUAQUNDRVNTX1RPS0VOAENBTExCQUNLAF9jb25zdW1lcktleQBfY29uc3VtZXJTZWNyZXQAX3Rva2VuAF90b2tlblNlY3JldABnZXRfQ29uc3VtZXJLZXkAc2V0X0NvbnN1bWVyS2V5AGdldF9Db25zdW1lclNlY3JldABzZXRfQ29uc3VtZXJTZWNyZXQAZ2V0X1Rva2VuAHNldF9Ub2tlbgBnZXRfVG9rZW5TZWNyZXQAc2V0X1Rva2VuU2VjcmV0AGdldFJlcXVlc3RUb2tlbgBnZXRBY2Nlc3NUb2tlbgBnZXRfQXV0aG9yaXphdGlvbkxpbmsAb0F1dGhXZWJSZXF1ZXN0AEFQSVdlYlJlcXVlc3QAV2ViUmVxdWVzdABTeXN0ZW0uTmV0AEh0dHBXZWJSZXF1ZXN0AFdlYlJlc3BvbnNlR2V0AENvbnN1bWVyS2V5AENvbnN1bWVyU2VjcmV0AFRva2VuAFRva2VuU2VjcmV0AEF1dGhvcml6YXRpb25MaW5rAEdFVABQT1NUAFBVVABERUxFVEUAZnVuYwBoYXNoQWxnb3JpdGhtAGRhdGEAcGFyYW1ldGVycwB1cmwAY29uc3VtZXJLZXkAdG9rZW4AdG9rZW5TZWNyZXQAaHR0cE1ldGhvZAB0aW1lU3RhbXAAbm9uY2UAY2FsbGJhY2sAc2lnbmF0dXJlVHlwZQBub3JtYWxpemVkVXJsAFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcwBPdXRBdHRyaWJ1dGUAbm9ybWFsaXplZFJlcXVlc3RQYXJhbWV0ZXJzAHNpZ25hdHVyZUJhc2UAaGFzaABjb25zdW1lclNlY3JldAB4AHkAbWV0aG9kAHBvc3REYXRhAHdlYlJlcXVlc3QAaWQAdXJsU3VmZml4AFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQByMG11cWZ3LQBBcmd1bWVudE51bGxFeGNlcHRpb24AU3RyaW5nAElzTnVsbE9yRW1wdHkAU3lzdGVtLlRleHQARW5jb2RpbmcAZ2V0X0FTQ0lJAEdldEJ5dGVzAENvbnZlcnQAVG9CYXNlNjRTdHJpbmcAU3RhcnRzV2l0aABSZW1vdmUAQ2hhcgBTcGxpdABJbmRleE9mAEFkZABFbXB0eQBTdHJpbmdCdWlsZGVyAGdldF9DaGFycwBBcHBlbmQASW50MzIARm9ybWF0AENvbmNhdABnZXRfTGVuZ3RoAFRvU3RyaW5nAGdldF9JdGVtAEFwcGVuZEZvcm1hdABJQ29sbGVjdGlvbmAxAGdldF9Db3VudABnZXRfUXVlcnkAU29ydABnZXRfU2NoZW1lAGdldF9Ib3N0AG9wX0VxdWFsaXR5AGdldF9Qb3J0AGdldF9BYnNvbHV0ZVBhdGgAVG9VcHBlcgBTeXN0ZW0uV2ViAEh0dHBVdGlsaXR5AEtleWVkSGFzaEFsZ29yaXRobQBzZXRfS2V5AE5vdEltcGxlbWVudGVkRXhjZXB0aW9uAEFyZ3VtZW50RXhjZXB0aW9uAERhdGVUaW1lAGdldF9VdGNOb3cAVGltZVNwYW4Ab3BfU3VidHJhY3Rpb24AZ2V0X1RvdGFsU2Vjb25kcwBUb0ludDY0AEludDY0AE5leHQAU3lzdGVtLkNvbGxlY3Rpb25zLlNwZWNpYWxpemVkAE5hbWVWYWx1ZUNvbGxlY3Rpb24AUGFyc2VRdWVyeVN0cmluZwBFeGNlcHRpb24AZ2V0X0FsbEtleXMAVXJsRGVjb2RlAHNldF9JdGVtAENvbnRhaW5zAENyZWF0ZQBzZXRfTWV0aG9kAENyZWRlbnRpYWxDYWNoZQBJQ3JlZGVudGlhbHMAZ2V0X0RlZmF1bHRDcmVkZW50aWFscwBzZXRfQ3JlZGVudGlhbHMAc2V0X0FsbG93V3JpdGVTdHJlYW1CdWZmZXJpbmcAc2V0X1ByZUF1dGhlbnRpY2F0ZQBTZXJ2aWNlUG9pbnQAZ2V0X1NlcnZpY2VQb2ludABzZXRfRXhwZWN0MTAwQ29udGludWUAU2VydmljZVBvaW50TWFuYWdlcgBTZWN1cml0eVByb3RvY29sVHlwZQBzZXRfU2VjdXJpdHlQcm90b2NvbABXZWJIZWFkZXJDb2xsZWN0aW9uAGdldF9IZWFkZXJzAGdldF9VVEY4AHNldF9Db250ZW50TGVuZ3RoAFN5c3RlbS5JTwBTdHJlYW0AR2V0UmVxdWVzdFN0cmVhbQBXcml0ZQBDbG9zZQBzZXRfVXNlckFnZW50AHNldF9UaW1lb3V0AHNldF9Db250ZW50VHlwZQBTdHJlYW1Xcml0ZXIAVGV4dFdyaXRlcgBXZWJSZXNwb25zZQBHZXRSZXNwb25zZQBHZXRSZXNwb25zZVN0cmVhbQBTdHJlYW1SZWFkZXIAVGV4dFJlYWRlcgBSZWFkVG9FbmQAVHJpbQBnZXRfTWVzc2FnZQAAG2gAYQBzAGgAQQBsAGcAbwByAGkAdABoAG0AAAlkAGEAdABhAAADPwAADW8AYQB1AHQAaABfAAANewAwADoAWAAyAH0AAA97ADAAfQA9AHsAMQB9AAADJgAAF2MAbwBuAHMAdQBtAGUAcgBLAGUAeQAAFWgAdAB0AHAATQBlAHQAaABvAGQAABtzAGkAZwBuAGEAdAB1AHIAZQBUAHkAcABlAAAbbwBhAHUAdABoAF8AdgBlAHIAcwBpAG8AbgAABzEALgAwAAAXbwBhAHUAdABoAF8AbgBvAG4AYwBlAAAfbwBhAHUAdABoAF8AdABpAG0AZQBzAHQAYQBtAHAAAC1vAGEAdQB0AGgAXwBzAGkAZwBuAGEAdAB1AHIAZQBfAG0AZQB0AGgAbwBkAAAlbwBhAHUAdABoAF8AYwBvAG4AcwB1AG0AZQByAF8AawBlAHkAAB1vAGEAdQB0AGgAXwBjAGEAbABsAGIAYQBjAGsAABdvAGEAdQB0AGgAXwB0AG8AawBlAG4AAB1vAGEAdQB0AGgAXwB2AGUAcgBpAGYAaQBlAHIAABN7ADAAfQA6AC8ALwB7ADEAfQAACWgAdAB0AHAAAAtoAHQAdABwAHMAAAM6AAAJewAwAH0AJgAAB3sAMAB9AAAPewAwAH0AJgB7ADEAfQAAE0gATQBBAEMALQBTAEgAQQAxAAEBAC1VAG4AawBuAG8AdwBuACAAcwBpAGcAbgBhAHQAdQByAGUAIAB0AHkAcABlAACAhWEAYgBjAGQAZQBmAGcAaABpAGoAawBsAG0AbgBvAHAAcQByAHMAdAB1AHYAdwB4AHkAegBBAEIAQwBEAEUARgBHAEgASQBKAEsATABNAE4ATwBQAFEAUgBTAFQAVQBWAFcAWABZAFoAMAAxADIAMwA0ADUANgA3ADgAOQAtAF8ALgB+AAFfaAB0AHQAcABzADoALwAvAGEAcABpAC4AbABpAG4AawBlAGQAaQBuAC4AYwBvAG0ALwB1AGEAcwAvAG8AYQB1AHQAaAAvAHIAZQBxAHUAZQBzAHQAVABvAGsAZQBuAAAlbwBhAHUAdABoAF8AdABvAGsAZQBuAF8AcwBlAGMAcgBlAHQAAFdUAGgAZQAgAHIAZQBxAHUAZQBzAHQAIAB0AG8AawBlAG4AIABhAG4AZAAgAHYAZQByAGkAZgBpAGUAcgAgAHcAZQByAGUAIABuAG8AdAAgAHMAZQB0AABdaAB0AHQAcABzADoALwAvAGEAcABpAC4AbABpAG4AawBlAGQAaQBuAC4AYwBvAG0ALwB1AGEAcwAvAG8AYQB1AHQAaAAvAGEAYwBjAGUAcwBzAFQAbwBrAGUAbgAAc2gAdAB0AHAAcwA6AC8ALwBhAHAAaQAuAGwAaQBuAGsAZQBkAGkAbgAuAGMAbwBtAC8AdQBhAHMALwBvAGEAdQB0AGgALwBhAHUAdABoAG8AcgBpAHoAZQA/AG8AYQB1AHQAaABfAHQAbwBrAGUAbgA9AAADPQAAWWgAdAB0AHAAcwA6AC8ALwBhAHAAaQAuAGwAaQBuAGsAZQBkAGkAbgAuAGMAbwBtAC8AdQBhAHMALwBvAGEAdQB0AGgALwBhAHUAdABoAG8AcgBpAHoAZQAAIyYAbwBhAHUAdABoAF8AcwBpAGcAbgBhAHQAdQByAGUAPQAAG0EAdQB0AGgAbwByAGkAegBhAHQAaQBvAG4AAHdPAEEAdQB0AGgAIAByAGUAYQBsAG0APQAiAGgAdAB0AHAAOgAvAC8AYQBwAGkALgBsAGkAbgBrAGUAZABpAG4ALgBjAG8AbQAvACIALABvAGEAdQB0AGgAXwBjAG8AbgBzAHUAbQBlAHIAXwBrAGUAeQA9ACIAAB8iACwAbwBhAHUAdABoAF8AdABvAGsAZQBuAD0AIgAAbSIALABvAGEAdQB0AGgAXwBzAGkAZwBuAGEAdAB1AHIAZQBfAG0AZQB0AGgAbwBkAD0AIgBIAE0AQQBDAC0AUwBIAEEAMQAiACwAbwBhAHUAdABoAF8AcwBpAGcAbgBhAHQAdQByAGUAP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AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAAKA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"/>
                  <SnippetLanguage val="C"/>
                  <ForCompactFramework val="N"/>
                  <isGuiThreadExecution val="Y"/>
                  <CompileTime HighDateTime="30164107" LowDateTime="2433511295"/>
                  <AssemblyIds val="-279589575,-1292091557,"/>
                  <RetainFocus val="N"/>
                  <Condition val="Y"/>
                  <Modifier val="S"/>
                  <Direction val="C"/>
                </Invoke>
              </LogicLine>
              <LogicLine>
                <STP Buttons="O" DefaultButton="1" ERR_LOG_DEF_CHG="N" Exp="2" FlowIsn="23" IMG_DEF_CHG="N" Image="E" Mode="W" TTL_DEF_CHG="N" TitleTxt="Warning" VR_DISP="B">
                  <AppendToErrorLog val="N"/>
                  <Condition Exp="3"/>
                  <Modifier val="B"/>
                  <Direction val="C"/>
                </STP>
              </LogicLine>
              <LogicLine>
                <Remark FlowIsn="24">
                  <Type val="2"/>
                  <Text val=" "/>
                </Remark>
              </LogicLine>
            </LogicLines>
          </LogicUnit>
          <LogicUnit id="13" propagate="78">
            <Level val="H"/>
            <Type val="U"/>
            <_DspTemplate val="0"/>
            <_HeaderPosition val="25"/>
            <Scope val="S"/>
            <EngineDirective val="S"/>
            <ShowMessage val="Y"/>
            <Condition val="89"/>
            <Event>
              <EventType val="U"/>
              <PublicObject comp="-1" obj="3"/>
            </Event>
            <Expanded val="1"/>
            <LogicLines>
              <LogicLine>
                <Invoke FlowIsn="25">
                  <OperationType val="."/>
                  <TaskID comp="-1"/>
                  <Lock val="N"/>
                  <Arguments>
                    <Argument>
                      <id val="21"/>
                      <Variable val="10"/>
                      <Skip val="N"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                    <Argument>
                      <id val="22"/>
                      <Variable val="1"/>
                      <Skip val="N"/>
                      <Name val="ConsumerKey"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                    <Argument>
                      <id val="23"/>
                      <Variable val="2"/>
                      <Skip val="N"/>
                      <Name val="ConsumerSecret"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                    <Argument>
                      <id val="24"/>
                      <Variable val="3"/>
                      <Skip val="N"/>
                      <Name val="Token"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                    <Argument>
                      <id val="25"/>
                      <Variable val="4"/>
                      <Skip val="N"/>
                      <Name val="TokenSecret"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                    <Argument>
                      <id val="26"/>
                      <Variable val="6"/>
                      <Skip val="N"/>
                      <Name val="Verifier"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                    <Argument>
                      <id val="27"/>
                      <Variable val="9"/>
                      <Skip val="N"/>
                      <Name val="Status"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                    <Argument>
                      <id val="28"/>
                      <Variable val="7"/>
                      <Skip val="N"/>
                      <Name val="id"/>
                      <DotNetType val="System.String"/>
                    </Argument>
                  </Arguments>
                  <Wait val="Y"/>
                  <SyncData val="N"/>
                  <ReturnValue val="10"/>
                  <FunctionName val="func"/>
                  <SnippetCode val="using System;&#xA;using System.Security.Cryptography;&#xA;using System.Collections.Generic;&#xA;using System.Collections.Specialized;&#xA;using System.Web;&#xA;using System.Net;&#xA;using System.Text;&#xA;using System.IO;&#xA; &#xA;    public class oAuthBase&#xA;    {&#xA;&#xA;        /// &lt;summary>&#xA;        /// Provides a predefined set of algorithms that are supported officially by the protocol&#xA;        /// &lt;/summary>&#xA;        public enum SignatureTypes&#xA;        {&#xA;            HMACSHA1,&#xA;            PLAINTEXT,&#xA;            RSASHA1&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Provides an internal structure to sort the query parameter&#xA;        /// &lt;/summary>&#xA;        protected class QueryParameter&#xA;        {&#xA;            private string name = null;&#xA;            private string value = null;&#xA;&#xA;            public QueryParameter(string name, string value)&#xA;            {&#xA;                this.name = name;&#xA;                this.value = value;&#xA;            }&#xA;&#xA;            public string Name&#xA;            {&#xA;                get { return name; }&#xA;            }&#xA;&#xA;            public string Value&#xA;            {&#xA;                get { return value; }&#xA;            }&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Comparer class used to perform the sorting of the query parameters&#xA;        /// &lt;/summary>&#xA;        protected class QueryParameterComparer : IComparer&lt;QueryParameter>&#xA;        {&#xA;&#xA;            #region IComparer&lt;QueryParameter> Members&#xA;&#xA;            public int Compare(QueryParameter x, QueryParameter y)&#xA;            {&#xA;                if (x.Name == y.Name)&#xA;                {&#xA;                    return string.Compare(x.Value, y.Value);&#xA;                }&#xA;                else&#xA;                {&#xA;                    return string.Compare(x.Name, y.Name);&#xA;                }&#xA;            }&#xA;&#xA;            #endregion&#xA;        }&#xA;&#xA;        protected const string OAuthVersion = &quot;1.0&quot;;&#xA;        protected const string OAuthParameterPrefix = &quot;oauth_&quot;;&#xA;&#xA;        //&#xA;        // List of know and used oauth parameters' names&#xA;        //        &#xA;        protected const string OAuthConsumerKeyKey = &quot;oauth_consumer_key&quot;;&#xA;        protected const string OAuthCallbackKey = &quot;oauth_callback&quot;;&#xA;        protected const string OAuthVersionKey = &quot;oauth_version&quot;;&#xA;        protected const string OAuthSignatureMethodKey = &quot;oauth_signature_method&quot;;&#xA;        protected const string OAuthSignatureKey = &quot;oauth_signature&quot;;&#xA;        protected const string OAuthTimestampKey = &quot;oauth_timestamp&quot;;&#xA;        protected const string OAuthNonceKey = &quot;oauth_nonce&quot;;&#xA;        protected const string OAuthTokenKey = &quot;oauth_token&quot;;&#xA;        protected const string oAauthVerifier = &quot;oauth_verifier&quot;;&#xA;        protected const string OAuthTokenSecretKey = &quot;oauth_token_secret&quot;;&#xA;&#xA;        protected const string HMACSHA1SignatureType = &quot;HMAC-SHA1&quot;;&#xA;        protected const string PlainTextSignatureType = &quot;PLAINTEXT&quot;;&#xA;        protected const string RSASHA1SignatureType = &quot;RSA-SHA1&quot;;&#xA;&#xA;        protected Random random = new Random();&#xA;&#xA;        private string oauth_verifier;&#xA;        public string Verifier { get { return oauth_verifier; } set { oauth_verifier = value; } }&#xA;&#xA;&#xA;        protected string unreservedChars = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.~&quot;;&#xA;&#xA;        /// &lt;summary>&#xA;        /// Helper function to compute a hash value&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;hashAlgorithm&quot;>The hashing algoirhtm used. If that algorithm needs some initialization, like HMAC and its derivatives, they should be initialized prior to passing it to this function&lt;/param>&#xA;        /// &lt;param name=&quot;data&quot;>The data to hash&lt;/param>&#xA;        /// &lt;returns>a Base64 string of the hash value&lt;/returns>&#xA;        private string ComputeHash(HashAlgorithm hashAlgorithm, string data)&#xA;        {&#xA;            if (hashAlgorithm == null)&#xA;            {&#xA;                throw new ArgumentNullException(&quot;hashAlgorithm&quot;);&#xA;            }&#xA;&#xA;            if (string.IsNullOrEmpty(data))&#xA;            {&#xA;                throw new ArgumentNullException(&quot;data&quot;);&#xA;            }&#xA;&#xA;            byte[] dataBuffer = System.Text.Encoding.ASCII.GetBytes(data);&#xA;            byte[] hashBytes = hashAlgorithm.ComputeHash(dataBuffer);&#xA;&#xA;            return Convert.ToBase64String(hashBytes);&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Internal function to cut out all non oauth query string parameters (all parameters not begining with &quot;oauth_&quot;)&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;parameters&quot;>The query string part of the Url&lt;/param>&#xA;        /// &lt;returns>A list of QueryParameter each containing the parameter name and value&lt;/returns>&#xA;        private List&lt;QueryParameter> GetQueryParameters(string parameters)&#xA;        {&#xA;            if (parameters.StartsWith(&quot;?&quot;))&#xA;            {&#xA;                parameters = parameters.Remove(0, 1);&#xA;            }&#xA;&#xA;            List&lt;QueryParameter> result = new List&lt;QueryParameter>();&#xA;&#xA;            if (!string.IsNullOrEmpty(parameters))&#xA;            {&#xA;                string[] p = parameters.Split('&amp;');&#xA;                foreach (string s in p)&#xA;                {&#xA;                    if (!string.IsNullOrEmpty(s) &amp;&amp; !s.StartsWith(OAuthParameterPrefix))&#xA;                    {&#xA;                        if (s.IndexOf('=') > -1)&#xA;                        {&#xA;                            string[] temp = s.Split('=');&#xA;                            result.Add(new QueryParameter(temp[0], temp[1]));&#xA;                        }&#xA;                        else&#xA;                        {&#xA;                            result.Add(new QueryParameter(s, string.Empty));&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;&#xA;            return result;&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// This is a different Url Encode implementation since the default .NET one outputs the percent encoding in lower case.&#xA;        /// While this is not a problem with the percent encoding spec, it is used in upper case throughout OAuth&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;value&quot;>The value to Url encode&lt;/param>&#xA;        /// &lt;returns>Returns a Url encoded string&lt;/returns>&#xA;        public string UrlEncode(string value)&#xA;        {&#xA;            StringBuilder result = new StringBuilder();&#xA;&#xA;            foreach (char symbol in value)&#xA;            {&#xA;                if (unreservedChars.IndexOf(symbol) != -1)&#xA;                {&#xA;                    result.Append(symbol);&#xA;                }&#xA;                else&#xA;                {&#xA;                    result.Append('%' + String.Format(&quot;{0:X2}&quot;, (int)symbol));&#xA;                }&#xA;            }&#xA;&#xA;            return result.ToString();&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Normalizes the request parameters according to the spec&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;parameters&quot;>The list of parameters already sorted&lt;/param>&#xA;        /// &lt;returns>a string representing the normalized parameters&lt;/returns>&#xA;        protected string NormalizeRequestParameters(IList&lt;QueryParameter> parameters)&#xA;        {&#xA;            StringBuilder sb = new StringBuilder();&#xA;            QueryParameter p = null;&#xA;            for (int i = 0; i &lt; parameters.Count; i++)&#xA;            {&#xA;                p = parameters[i];&#xA;                sb.AppendFormat(&quot;{0}={1}&quot;, p.Name, p.Value);&#xA;&#xA;                if (i &lt; parameters.Count - 1)&#xA;                {&#xA;                    sb.Append(&quot;&amp;&quot;);&#xA;                }&#xA;            }&#xA;&#xA;            return sb.ToString();&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Generate the signature base that is used to produce the signature&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;url&quot;>The full url that needs to be signed including its non OAuth url parameters&lt;/param>&#xA;        /// &lt;param name=&quot;consumerKey&quot;>The consumer key&lt;/param>        &#xA;        /// &lt;param name=&quot;token&quot;>The token, if available. If not available pass null or an empty string&lt;/param>&#xA;        /// &lt;param name=&quot;tokenSecret&quot;>The token secret, if available. If not available pass null or an empty string&lt;/param>&#xA;        /// &lt;param name=&quot;httpMethod&quot;>The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)&lt;/param>&#xA;        /// &lt;param name=&quot;signatureType&quot;>The signature type. To use the default values use &lt;see cref=&quot;OAuthBase.SignatureTypes&quot;>OAuthBase.SignatureTypes&lt;/see>.&lt;/param>&#xA;        /// &lt;returns>The signature base&lt;/returns>&#xA;        public string GenerateSignatureBase(Uri url, string consumerKey, string token, string tokenSecret, string httpMethod, string timeStamp, string nonce, string callback, string signatureType, out string normalizedUrl, out string normalizedRequestParameters)&#xA;        {&#xA;            if (token == null)&#xA;            {&#xA;                token = string.Empty;&#xA;            }&#xA;&#xA;            if (tokenSecret == null)&#xA;            {&#xA;                tokenSecret = string.Empty;&#xA;            }&#xA;&#xA;            if (string.IsNullOrEmpty(consumerKey))&#xA;            {&#xA;                throw new ArgumentNullException(&quot;consumerKey&quot;);&#xA;            }&#xA;&#xA;            if (string.IsNullOrEmpty(httpMethod))&#xA;            {&#xA;                throw new ArgumentNullException(&quot;httpMethod&quot;);&#xA;            }&#xA;&#xA;            if (string.IsNullOrEmpty(signatureType))&#xA;            {&#xA;                throw new ArgumentNullException(&quot;signatureType&quot;);&#xA;            }&#xA;&#xA;            normalizedUrl = null;&#xA;            normalizedRequestParameters = null;&#xA;&#xA;            List&lt;QueryParameter> parameters = GetQueryParameters(url.Query);&#xA;            parameters.Add(new QueryParameter(OAuthVersionKey, OAuthVersion));&#xA;            parameters.Add(new QueryParameter(OAuthNonceKey, nonce));&#xA;            parameters.Add(new QueryParameter(OAuthTimestampKey, timeStamp));&#xA;            parameters.Add(new QueryParameter(OAuthSignatureMethodKey, signatureType));&#xA;            parameters.Add(new QueryParameter(OAuthConsumerKeyKey, consumerKey));&#xA;&#xA;            //TODO: Make this less of a hack&#xA;            if (!string.IsNullOrEmpty(callback))&#xA;            {&#xA;                parameters.Add(new QueryParameter(OAuthCallbackKey, UrlEncode(callback)));&#xA;            }&#xA;&#xA;            if (!string.IsNullOrEmpty(token))&#xA;            {&#xA;                parameters.Add(new QueryParameter(OAuthTokenKey, token));&#xA;            }&#xA;&#xA;            if (!string.IsNullOrEmpty(oauth_verifier))&#xA;            {&#xA;                parameters.Add(new QueryParameter(oAauthVerifier, oauth_verifier));&#xA;            }&#xA;&#xA;&#xA;            parameters.Sort(new QueryParameterComparer());&#xA;&#xA;&#xA;            normalizedUrl = string.Format(&quot;{0}://{1}&quot;, url.Scheme, url.Host);&#xA;            if (!((url.Scheme == &quot;http&quot; &amp;&amp; url.Port == 80) || (url.Scheme == &quot;https&quot; &amp;&amp; url.Port == 443)))&#xA;            {&#xA;                normalizedUrl += &quot;:&quot; + url.Port;&#xA;            }&#xA;            normalizedUrl += url.AbsolutePath;&#xA;            normalizedRequestParameters = NormalizeRequestParameters(parameters);&#xA;&#xA;            StringBuilder signatureBase = new StringBuilder();&#xA;            signatureBase.AppendFormat(&quot;{0}&amp;&quot;, httpMethod.ToUpper());&#xA;            signatureBase.AppendFormat(&quot;{0}&amp;&quot;, UrlEncode(normalizedUrl));&#xA;            signatureBase.AppendFormat(&quot;{0}&quot;, UrlEncode(normalizedRequestParameters));&#xA;&#xA;            return signatureBase.ToString();&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Generate the signature value based on the given signature base and hash algorithm&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;signatureBase&quot;>The signature based as produced by the GenerateSignatureBase method or by any other means&lt;/param>&#xA;        /// &lt;param name=&quot;hash&quot;>The hash algorithm used to perform the hashing. If the hashing algorithm requires initialization or a key it should be set prior to calling this method&lt;/param>&#xA;        /// &lt;returns>A base64 string of the hash value&lt;/returns>&#xA;        public string GenerateSignatureUsingHash(string signatureBase, HashAlgorithm hash)&#xA;        {&#xA;            return ComputeHash(hash, signatureBase);&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Generates a signature using the HMAC-SHA1 algorithm&#xA;        /// &lt;/summary>&#x9;&#x9;&#xA;        /// &lt;param name=&quot;url&quot;>The full url that needs to be signed including its non OAuth url parameters&lt;/param>&#xA;        /// &lt;param name=&quot;consumerKey&quot;>The consumer key&lt;/param>&#xA;        /// &lt;param name=&quot;consumerSecret&quot;>The consumer seceret&lt;/param>&#xA;        /// &lt;param name=&quot;token&quot;>The token, if available. If not available pass null or an empty string&lt;/param>&#xA;        /// &lt;param name=&quot;tokenSecret&quot;>The token secret, if available. If not available pass null or an empty string&lt;/param>&#xA;        /// &lt;param name=&quot;httpMethod&quot;>The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)&lt;/param>&#xA;        /// &lt;returns>A base64 string of the hash value&lt;/returns>&#xA;        public string GenerateSignature(Uri url, string consumerKey, string consumerSecret, string token, string tokenSecret, string httpMethod, string timeStamp, string nonce, string callback, out string normalizedUrl, out string normalizedRequestParameters)&#xA;        {&#xA;            return GenerateSignature(url, consumerKey, consumerSecret, token, tokenSecret, httpMethod, timeStamp, nonce, callback, SignatureTypes.HMACSHA1, out normalizedUrl, out normalizedRequestParameters);&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Generates a signature using the specified signatureType &#xA;        /// &lt;/summary>&#x9;&#x9;&#xA;        /// &lt;param name=&quot;url&quot;>The full url that needs to be signed including its non OAuth url parameters&lt;/param>&#xA;        /// &lt;param name=&quot;consumerKey&quot;>The consumer key&lt;/param>&#xA;        /// &lt;param name=&quot;consumerSecret&quot;>The consumer seceret&lt;/param>&#xA;        /// &lt;param name=&quot;token&quot;>The token, if available. If not available pass null or an empty string&lt;/param>&#xA;        /// &lt;param name=&quot;tokenSecret&quot;>The token secret, if available. If not available pass null or an empty string&lt;/param>&#xA;        /// &lt;param name=&quot;httpMethod&quot;>The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)&lt;/param>&#xA;        /// &lt;param name=&quot;signatureType&quot;>The type of signature to use&lt;/param>&#xA;        /// &lt;returns>A base64 string of the hash value&lt;/returns>&#xA;        public string GenerateSignature(Uri url, string consumerKey, string consumerSecret, string token, string tokenSecret, string httpMethod, string timeStamp, string nonce, string callback, SignatureTypes signatureType, out string normalizedUrl, out string normalizedRequestParameters)&#xA;        {&#xA;            normalizedUrl = null;&#xA;            normalizedRequestParameters = null;&#xA;&#xA;            switch (signatureType)&#xA;            {&#xA;                case SignatureTypes.PLAINTEXT:&#xA;                    return HttpUtility.UrlEncode(string.Format(&quot;{0}&amp;{1}&quot;, consumerSecret, tokenSecret));&#xA;                case SignatureTypes.HMACSHA1:&#xA;                    string signatureBase = GenerateSignatureBase(url, consumerKey, token, tokenSecret, httpMethod, timeStamp, nonce, callback, HMACSHA1SignatureType, out normalizedUrl, out normalizedRequestParameters);&#xA;                    HMACSHA1 hmacsha1 = new HMACSHA1();&#xA;                    hmacsha1.Key = Encoding.ASCII.GetBytes(string.Format(&quot;{0}&amp;{1}&quot;, UrlEncode(consumerSecret), string.IsNullOrEmpty(tokenSecret) ? &quot;&quot; : UrlEncode(tokenSecret)));&#xA;&#xA;                    return GenerateSignatureUsingHash(signatureBase, hmacsha1);&#xA;                case SignatureTypes.RSASHA1:&#xA;                    throw new NotImplementedException();&#xA;                default:&#xA;                    throw new ArgumentException(&quot;Unknown signature type&quot;, &quot;signatureType&quot;);&#xA;            }&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Generate the timestamp for the signature        &#xA;        /// &lt;/summary>&#xA;        /// &lt;returns>&lt;/returns>&#xA;&#xA;        public virtual string GenerateTimeStamp()&#xA;        {&#xA;            // Default implementation of UNIX time of the current UTC time&#xA;            TimeSpan ts = DateTime.UtcNow - new DateTime(1970, 1, 1, 0, 0, 0, 0);&#xA;            return Convert.ToInt64(ts.TotalSeconds).ToString();&#xA;        }&#xA;&#xA;        /*&#xA;       public virtual string GenerateTimeStamp() {&#xA;           // Default implementation of UNIX time of the current UTC time&#xA;           TimeSpan ts = DateTime.UtcNow - new DateTime(1970, 1, 1, 0, 0, 0, 0);&#xA;           string timeStamp = ts.TotalSeconds.ToString();&#xA;           timeStamp = timeStamp.Substring(0, timeStamp.IndexOf(&quot;,&quot;));&#xA;           return Convert.ToInt64(timeStamp).ToString(); &#xA;       }*/&#xA;&#xA;        /// &lt;summary>&#xA;        /// Generate a nonce&#xA;        /// &lt;/summary>&#xA;        /// &lt;returns>&lt;/returns>&#xA;        public virtual string GenerateNonce()&#xA;        {&#xA;            // Just a simple implementation of a random number between 123400 and 9999999&#xA;            return random.Next(123400, 9999999).ToString();&#xA;        }&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;&#xA;    public class OAuthLinkedIn : oAuthBase&#xA;    {&#xA;        /*Consumer settings from linkedin*/&#xA;        public string _consumerKey = &quot;&quot;;&#xA;        public string _consumerSecret = &quot;&quot;;&#xA;&#xA;        public enum Method { GET, POST, PUT, DELETE };&#xA;        public const string USER_AGENT = &quot;YourAgent&quot;;&#xA;        public const string REQUEST_TOKEN = &quot;https://api.linkedin.com/uas/oauth/requestToken&quot;;&#xA;        public const string AUTHORIZE = &quot;https://api.linkedin.com/uas/oauth/authorize&quot;;&#xA;        public const string ACCESS_TOKEN = &quot;https://api.linkedin.com/uas/oauth/accessToken&quot;;&#xA;        public const string CALLBACK = &quot;https://api.linkedin.com/uas/oauth/authorize&quot;;&#xA;&#xA;        private string _token = &quot;&quot;;&#xA;        private string _tokenSecret = &quot;&quot;;&#xA;        &#xA;        #region PublicPropertiies&#xA;        public string ConsumerKey { get { return _consumerKey; } set { _consumerKey = value; } }&#xA;        public string ConsumerSecret { get { return _consumerSecret;} set { _consumerSecret = value; } }&#xA;        public string Token { get { return _token; } set { _token = value; } }&#xA;        public string TokenSecret { get { return _tokenSecret; } set { _tokenSecret = value; } }&#xA;        #endregion&#xA;&#xA;        /// &lt;summary>&#xA;        /// Get the linkedin request token using the consumer key and secret.  Also initializes tokensecret&#xA;        /// &lt;/summary>&#xA;        /// &lt;returns>The request token.&lt;/returns>&#xA;        public String getRequestToken() {&#xA;            string ret = null;&#xA;            string response = oAuthWebRequest(Method.POST, REQUEST_TOKEN, String.Empty);&#xA;            if (response.Length > 0)&#xA;            {&#xA;                NameValueCollection qs = HttpUtility.ParseQueryString(response);&#xA;                if (qs[&quot;oauth_token&quot;] != null)&#xA;                {&#xA;                    this.Token = qs[&quot;oauth_token&quot;];&#xA;                    this.TokenSecret = qs[&quot;oauth_token_secret&quot;];&#xA;                    ret = this.Token;&#xA;                }&#xA;            }&#xA;            return ret;        &#xA;        }&#xA;&#xA;&#xA;        /// &lt;summary>&#xA;        /// Get the access token&#xA;        /// &lt;/summary>&#xA;        /// &lt;returns>The access token.&lt;/returns>        &#xA;        public String getAccessToken() {&#xA;            if (string.IsNullOrEmpty(Token) || string.IsNullOrEmpty(Verifier))&#xA;            {&#xA;                Exception e = new Exception(&quot;The request token and verifier were not set&quot;);&#xA;                throw e;&#xA;            }&#xA;&#xA;            string response = oAuthWebRequest(Method.POST, ACCESS_TOKEN, string.Empty);&#xA;&#xA;            if (response.Length > 0)&#xA;            {&#xA;                NameValueCollection qs = HttpUtility.ParseQueryString(response);&#xA;                if (qs[&quot;oauth_token&quot;] != null)&#xA;                {&#xA;                    this.Token = qs[&quot;oauth_token&quot;];&#xA;                }&#xA;                if (qs[&quot;oauth_token_secret&quot;] != null)&#xA;                {&#xA;                    this.TokenSecret = qs[&quot;oauth_token_secret&quot;];&#xA;                }&#xA;            }&#xA;&#xA;            return Token;        &#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Get the link to Linked In's authorization page for this application.&#xA;        /// &lt;/summary>&#xA;        /// &lt;returns>The url with a valid request token, or a null string.&lt;/returns>&#xA;        public string AuthorizationLink&#xA;        {&#xA;            get { return AUTHORIZE + &quot;?oauth_token=&quot; + this.Token; }&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Submit a web request using oAuth.&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;method&quot;>GET or POST&lt;/param>&#xA;        /// &lt;param name=&quot;url&quot;>The full url, including the querystring.&lt;/param>&#xA;        /// &lt;param name=&quot;postData&quot;>Data to post (querystring format)&lt;/param>&#xA;        /// &lt;returns>The web server response.&lt;/returns>&#xA;        public string oAuthWebRequest(Method method, string url, string postData)&#xA;        {&#xA;            string outUrl = &quot;&quot;;&#xA;            string querystring = &quot;&quot;;&#xA;            string ret = &quot;&quot;;&#xA;&#xA;            //Setup postData for signing.&#xA;            //Add the postData to the querystring.&#xA;            if (method == Method.POST)&#xA;            {&#xA;                if (postData.Length > 0)&#xA;                {&#xA;                    //Decode the parameters and re-encode using the oAuth UrlEncode method.&#xA;                    NameValueCollection qs = HttpUtility.ParseQueryString(postData);&#xA;                    postData = &quot;&quot;;&#xA;                    foreach (string key in qs.AllKeys)&#xA;                    {&#xA;                        if (postData.Length > 0)&#xA;                        {&#xA;                            postData += &quot;&amp;&quot;;&#xA;                        }&#xA;                        qs[key] = HttpUtility.UrlDecode(qs[key]);&#xA;                        qs[key] = this.UrlEncode(qs[key]);&#xA;                        postData += key + &quot;=&quot; + qs[key];&#xA;&#xA;                    }&#xA;                    if (url.IndexOf(&quot;?&quot;) > 0)&#xA;                    {&#xA;                        url += &quot;&amp;&quot;;&#xA;                    }&#xA;                    else&#xA;                    {&#xA;                        url += &quot;?&quot;;&#xA;                    }&#xA;                    url += postData;&#xA;                }&#xA;            }&#xA;&#xA;            Uri uri = new Uri(url);&#xA;&#xA;            string nonce = this.GenerateNonce();&#xA;            string timeStamp = this.GenerateTimeStamp();&#xA;            &#xA;            string callback = &quot;&quot;;&#xA;            if (url.ToString().Contains(REQUEST_TOKEN))&#xA;                callback = CALLBACK;&#xA;&#xA;            //Generate Signature&#xA;            string sig = this.GenerateSignature(uri,&#xA;                this.ConsumerKey,&#xA;                this.ConsumerSecret,&#xA;                this.Token,&#xA;                this.TokenSecret,&#xA;                method.ToString(),&#xA;                timeStamp,&#xA;                nonce,&#xA;                callback,&#xA;                out outUrl,&#xA;                out querystring);&#xA;&#xA;&#xA;            querystring += &quot;&amp;oauth_signature=&quot; + HttpUtility.UrlEncode(sig);&#xA;&#xA;            //Convert the querystring to postData&#xA;            if (method == Method.POST)&#xA;            {&#xA;                postData = querystring;&#xA;                querystring = &quot;&quot;;&#xA;            }&#xA;&#xA;            if (querystring.Length > 0)&#xA;            {&#xA;                outUrl += &quot;?&quot;;&#xA;            }&#xA;&#xA;            if (method == Method.POST || method == Method.GET)&#xA;                ret = WebRequest(method, outUrl + querystring, postData);&#xA;                &#xA;            return ret;&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// WebRequestWithPut&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;method&quot;>WebRequestWithPut&lt;/param>&#xA;        /// &lt;param name=&quot;url&quot;>&lt;/param>&#xA;        /// &lt;param name=&quot;postData&quot;>&lt;/param>&#xA;        /// &lt;returns>&lt;/returns>&#xA;        public string APIWebRequest(string method, string url, string postData)&#xA;        {&#xA;            Uri uri = new Uri(url);&#xA;            string nonce = this.GenerateNonce();&#xA;            string timeStamp = this.GenerateTimeStamp();&#xA;&#xA;            string outUrl, querystring;&#xA;&#xA;            //Generate Signature&#xA;            string sig = this.GenerateSignature(uri,&#xA;                this.ConsumerKey,&#xA;                this.ConsumerSecret,&#xA;                this.Token,&#xA;                this.TokenSecret,&#xA;                method,&#xA;                timeStamp,&#xA;                nonce,&#xA;                null,&#xA;                out outUrl,&#xA;                out querystring);&#xA;&#xA;            HttpWebRequest webRequest = null;&#xA;&#xA;            webRequest = System.Net.WebRequest.Create(url) as HttpWebRequest;&#xA;            webRequest.Method = method;&#xA;            webRequest.Credentials = CredentialCache.DefaultCredentials;&#xA;            webRequest.AllowWriteStreamBuffering = true;&#xA;&#xA;            webRequest.PreAuthenticate = true;&#xA;            webRequest.ServicePoint.Expect100Continue = false;&#xA;            ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3;&#xA;&#xA;            webRequest.Headers.Add(&quot;Authorization&quot;, &quot;OAuth realm=\&quot;http://api.linkedin.com/\&quot;,oauth_consumer_key=\&quot;&quot; + this.ConsumerKey + &quot;\&quot;,oauth_token=\&quot;&quot; + this.Token + &quot;\&quot;,oauth_signature_method=\&quot;HMAC-SHA1\&quot;,oauth_signature=\&quot;&quot; + HttpUtility.UrlEncode(sig) + &quot;\&quot;,oauth_timestamp=\&quot;&quot; + timeStamp + &quot;\&quot;,oauth_nonce=\&quot;&quot; + nonce + &quot;\&quot;,oauth_verifier=\&quot;&quot; + this.Verifier + &quot;\&quot;, oauth_version=\&quot;1.0\&quot;&quot;);            &#xA;&#xA;            if (postData != null)&#xA;            {&#xA;                byte[] fileToSend = Encoding.UTF8.GetBytes(postData);&#xA;                webRequest.ContentLength = fileToSend.Length;&#xA;&#xA;                Stream reqStream = webRequest.GetRequestStream();&#xA;&#xA;                reqStream.Write(fileToSend, 0, fileToSend.Length);&#xA;                reqStream.Close();&#xA;            }&#xA;&#xA;            string returned = WebResponseGet(webRequest);&#xA;&#xA;            return returned;&#xA;        }&#xA;&#xA;&#xA;        /// &lt;summary>&#xA;        /// Web Request Wrapper&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;method&quot;>Http Method&lt;/param>&#xA;        /// &lt;param name=&quot;url&quot;>Full url to the web resource&lt;/param>&#xA;        /// &lt;param name=&quot;postData&quot;>Data to post in querystring format&lt;/param>&#xA;        /// &lt;returns>The web server response.&lt;/returns>&#xA;        public string WebRequest(Method method, string url, string postData)&#xA;        {&#xA;            HttpWebRequest webRequest = null;&#xA;            StreamWriter requestWriter = null;&#xA;            string responseData = &quot;&quot;;&#xA;&#xA;            webRequest = System.Net.WebRequest.Create(url) as HttpWebRequest;&#xA;            webRequest.Method = method.ToString();&#xA;            webRequest.ServicePoint.Expect100Continue = false;&#xA;            webRequest.UserAgent  = USER_AGENT;&#xA;            webRequest.Timeout = 20000;&#xA;&#xA;            if (method == Method.POST)&#xA;            {&#xA;                webRequest.ContentType = &quot;application/x-www-form-urlencoded&quot;;&#xA;&#xA;                requestWriter = new StreamWriter(webRequest.GetRequestStream());&#xA;                try&#xA;                {&#xA;                    requestWriter.Write(postData);&#xA;                }&#xA;                catch&#xA;                {&#xA;                    throw;&#xA;                }&#xA;                finally&#xA;                {&#xA;                    requestWriter.Close();&#xA;                    requestWriter = null;&#xA;                }&#xA;            }&#xA;&#xA;            responseData = WebResponseGet(webRequest);&#xA;&#xA;            webRequest = null;&#xA;&#xA;            return responseData;&#xA;&#xA;        }&#xA;&#xA;        /// &lt;summary>&#xA;        /// Process the web response.&#xA;        /// &lt;/summary>&#xA;        /// &lt;param name=&quot;webRequest&quot;>The request object.&lt;/param>&#xA;        /// &lt;returns>The response data.&lt;/returns>&#xA;        public string WebResponseGet(HttpWebRequest webRequest)&#xA;        {&#xA;            StreamReader responseReader = null;&#xA;            string responseData = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#xA;            try&#xA;            {&#xA;                responseReader = new StreamReader(webRequest.GetResponse().GetResponseStream());&#xA;                responseData = responseReader.ReadToEnd();&#xA;            }&#xA;            catch (Exception e)&#xA;            {&#xA;                throw e;&#xA;            }&#xA;            finally&#xA;            {&#xA;                webRequest.GetResponse().GetResponseStream().Close();&#xA;                responseReader.Close();&#xA;                responseReader = null;&#xA;            }&#xA;&#xA;            return responseData;&#xA;        }&#xA;    }&#xA;&#xA;&#x9;&#xA;public static class Snippet&#xA;{&#xA;&#x9;public static System.String func(System.String ConsumerKey, System.String ConsumerSecret, System.String Token, System.String TokenSecret, System.String Verifier, System.String Status, System.String id)&#xA;&#x9;{&#xA;   &#x9;  try&#xA;      {&#xA;&#x9;&#x9;OAuthLinkedIn _oauth = new OAuthLinkedIn();&#xA;&#x9;&#x9;_oauth.ConsumerKey=ConsumerKey;&#xA;&#x9;&#x9;_oauth.ConsumerSecret = ConsumerSecret;&#xA;&#x9;&#x9;_oauth.Token = Token;&#xA;&#x9;&#x9;_oauth.TokenSecret = TokenSecret;&#xA;&#x9;&#x9;_oauth.Verifier = Verifier;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;string xml = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?>&quot;;&#xA;        xml += &quot;&lt;current-status>&quot; + Status + &quot;&lt;/current-status>&quot;;&#xA;&#xA;        string response = _oauth.APIWebRequest(&quot;PUT&quot;, &quot;https://api.linkedin.com/v1/people/&quot;+ id.Trim()+&quot;/current-status&quot;, xml);&#xA;        if (response == &quot;&quot;)&#xA;             return &quot;Your new status updated.  view linkedin for status.&quot;;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;return &quot;&quot;;&#xA;      }&#xA;      catch (Exception exp)&#xA;      {&#xA;        return &quot;Exception: &quot; + exp.Message; &#xA;      }&#xA;&#xA;&#x9;}&#xA;}"/>
                  <CompiledCode val="
                  <SnippetLanguage val="C"/>
                  <ForCompactFramework val="N"/>
                  <isGuiThreadExecution val="Y"/>
                  <CompileTime HighDateTime="30164107" LowDateTime="2435921295"/>
                  <AssemblyIds val="-279589575,-1292091557,"/>
                  <RetainFocus val="N"/>
                  <Condition val="Y"/>
                  <Modifier val="S"/>
                  <Direction val="C"/>
                </Invoke>
              </LogicLine>
              <LogicLine>
                <STP Buttons="O" DefaultButton="1" ERR_LOG_DEF_CHG="N" Exp="2" FlowIsn="26" IMG_DEF_CHG="N" Image="E" Mode="W" TTL_DEF_CHG="N" TitleTxt="Warning" VR_DISP="B">
                  <AppendToErrorLog val="N"/>
                  <Condition Exp="3"/>
                  <Modifier val="B"/>
                  <Direction val="C"/>
                </STP>
              </LogicLine>
            </LogicLines>
          </LogicUnit>
        </TaskLogic>
        <TaskForms>
          <FormEntry _last_isn="25" _last_test_id="25" id="3">
            <PropertyList model="FORM_GUI0">
              <Width id="23" val="561"/>
              <Height id="24" val="298"/>
              <ShowGrid id="37"/>
              <GridX id="38" val="2"/>
              <GridY id="39" val="2"/>
              <_Comment id="218"/>
              <FormName Exp="1" id="311" valUnicode="CN14_Linkedin Profile_status"/>
            </PropertyList>
            <Control _test_id="1" id="1">
              <PropertyList model="CTRL_GUI0_STATIC">
                <Text id="19" valUnicode="ID:"/>
                <X id="21" val="8"/>
                <Y id="22" val="22"/>
                <Width id="23" val="28"/>
                <Height id="24" val="10"/>
                <Enabled Exp="9" id="62"/>
                <Style id="63" val="7"/>
                <_VerticalScroll id="73"/>
                <_Orientation id="143"/>
              </PropertyList>
            </Control>
            <Control _test_id="2" id="2">
              <PropertyList model="CTRL_GUI0_EDIT">
                <Model ID="MODEL_GUI_INT" id="1">
                  <Var FieldID="7"/>
                </Model>
                <X id="21" val="40"/>
                <Y id="22" val="22"/>
                <Width id="23" val="172"/>
                <Height id="24" val="10"/>
                <Data FieldID="7" id="43"/>
                <ControlName id="46" val="id"/>
                <Enabled Exp="9" id="62"/>
                <ExpansionWindow id="84"/>
                <_Orientation id="143"/>
                <TabOrder id="314" val="2"/>
              </PropertyList>
            </Control>
            <Control _test_id="7" id="7">
              <PropertyList model="CTRL_GUI0_STATIC">
                <Text id="19" valUnicode="Status:"/>
                <X id="21" val="8"/>
                <Y id="22" val="36"/>
                <Width id="23" val="26"/>
                <Height id="24" val="10"/>
                <Enabled Exp="9" id="62"/>
                <Style id="63" val="7"/>
                <HorizontalAlignment id="65" val="3"/>
                <_VerticalScroll id="73"/>
                <_Orientation id="143"/>
              </PropertyList>
            </Control>
            <Control _test_id="8" id="8">
              <PropertyList model="CTRL_GUI0_EDIT">
                <Model ID="MODEL_GUI_INT" id="1">
                  <Var FieldID="9"/>
                </Model>
                <X id="21" val="40"/>
                <Y id="22" val="36"/>
                <Width id="23" val="172"/>
                <Height id="24" val="10"/>
                <Data FieldID="9" id="43"/>
                <ControlName id="46" val="Status"/>
                <Enabled Exp="9" id="62"/>
                <HorizontalScroll id="72"/>
                <VerticalScroll id="73"/>
                <AllowCRInData id="74"/>
                <ExpansionWindow id="84"/>
                <_Orientation id="143"/>
                <ShowScrollBars id="273"/>
                <TabOrder id="314" val="5"/>
                <MultilineWordwrapScroll id="455" val="2"/>
              </PropertyList>
            </Control>
            <Control PDOD="128" _test_id="15" id="15">
              <PropertyList model="CTRL_GUI0_PUSH_BUTTON">
                <X id="21" val="40"/>
                <Y id="22" val="4"/>
                <Width id="23" val="68"/>
                <Height id="24" val="14"/>
                <ControlName id="46" val="Authenticate"/>
                <Format id="82" valUnicode="Authenticate"/>
                <RaiseEvent id="234">
                  <EventType val="U"/>
                  <PublicObject comp="-1" obj="1"/>
                </RaiseEvent>
                <TabOrder id="314" val="1"/>
              </PropertyList>
            </Control>
            <Control _test_id="3" id="3">
              <PropertyList model="CTRL_GUI0_STATIC">
                <Text id="19"/>
                <X id="21" val="407"/>
                <Y id="22" val="9"/>
                <Width id="23" val="149"/>
                <Height id="24" val="86"/>
                <Color id="51" val="14"/>
                <Style id="63" val="7"/>
                <StaticType id="70" val="128"/>
                <MultiLine id="71"/>
                <_VerticalScroll id="73"/>
                <_Orientation id="143"/>
                <Line3D id="184"/>
              </PropertyList>
            </Control>
            <Control ISN_FATHER="3" _test_id="4" id="4">
              <PropertyList model="CTRL_GUI0_STATIC">
                <Text id="19" valUnicode="{\rtf1\fbidis\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fswiss\fprq2\fcharset0 Microsoft Sans Serif;}{\f1\fswiss\fprq2\fcharset177 Microsoft Sans Serif;}{\f2\fnil\fcharset0 Microsoft Sans Serif;}}&#xD;&#xA;{\colortbl ;\red0\green0\blue0;}&#xD;&#xA;{\*\generator Msftedit 5.41.21.2509;}\viewkind4\uc1\pard\ltrpar\cf1\b\f0\fs20 This sample uses the Linkedin API \lang1037\f1\rtlch\par&#xD;&#xA;\lang1033\f0\ltrch\par&#xD;&#xA;For more information, refer to: http://developer.linkedin.com/community/apis\lang1037\f1\rtlch\par&#xD;&#xA;\lang1033\f2\ltrch\par&#xD;&#xA;}&#xD;&#xA;"/>
                <X id="21" val="411"/>
                <Y id="22" val="17"/>
                <Width id="23" val="139"/>
                <Height id="24" val="71"/>
                <Color id="51" val="14"/>
                <Style id="63" val="1"/>
                <EnableRTF id="69" val="Y"/>
                <MultiLine id="71"/>
                <_VerticalScroll id="73"/>
                <_Orientation id="143"/>
                <Line3D id="184"/>
                <Border id="452"/>
              </PropertyList>
            </Control>
            <Control PDOD="1" _test_id="17" id="17">
              <PropertyList model="CTRL_GUI0_COMBOBOX">
                <X id="21" val="224"/>
                <Y id="22" val="22"/>
                <Width id="23" val="96"/>
                <Height id="24" val="11"/>
                <Data FieldID="8" id="43"/>
                <ItemsList id="45" valUnicode="1,2,3"/>
                <ControlName id="46" val="type"/>
                <Enabled Exp="9" id="62"/>
                <_Orientation id="143"/>
                <DisplayList id="303" valUnicode="Profile, Status, Members Status"/>
                <TabOrder id="314" val="3"/>
              </PropertyList>
            </Control>
            <Control PDOD="128" _test_id="6" id="6">
              <PropertyList model="CTRL_GUI0_PUSH_BUTTON">
                <X id="21" val="332"/>
                <Y id="22" val="22"/>
                <Width id="23" val="68"/>
                <Height id="24" val="14"/>
                <ControlName id="46" val="Get"/>
                <Enabled Exp="9" id="62"/>
                <Format id="82" valUnicode="Get"/>
                <RaiseEvent id="234">
                  <EventType val="U"/>
                  <PublicObject comp="-1" obj="2"/>
                </RaiseEvent>
                <TabOrder id="314" val="4"/>
              </PropertyList>
            </Control>
            <Control PDOD="128" _test_id="16" id="16">
              <PropertyList model="CTRL_GUI0_PUSH_BUTTON">
                <X id="21" val="332"/>
                <Y id="22" val="40"/>
                <Width id="23" val="68"/>
                <Height id="24" val="14"/>
                <ControlName id="46" val="Update"/>
                <Enabled Exp="9" id="62"/>
                <Format id="82" valUnicode="Update Status"/>
                <RaiseEvent id="234">
                  <EventType val="U"/>
                  <PublicObject comp="-1" obj="3"/>
                </RaiseEvent>
                <TabOrder id="314" val="6"/>
              </PropertyList>
            </Control>
            <Control _test_id="18" id="18">
              <PropertyList model="CTRL_GUI0_STATIC">
                <Text id="19" valUnicode="Output"/>
                <Placement bottom="100" id="20" right="100"/>
                <X id="21" val="4"/>
                <Y id="22" val="56"/>
                <Width id="23" val="396"/>
                <Height id="24" val="152"/>
                <Style id="63" val="1"/>
                <StaticType id="70" val="128"/>
                <MultiLine id="71"/>
                <_Orientation id="143"/>
              </PropertyList>
            </Control>
            <Control ISN_FATHER="18" _test_id="9" id="9">
              <PropertyList model="CTRL_GUI0_STATIC">
                <Text id="19" valUnicode="Token:"/>
                <X id="21" val="16"/>
                <Y id="22" val="72"/>
                <Width id="23" val="76"/>
                <Height id="24" val="10"/>
                <Style id="63" val="7"/>
                <HorizontalAlignment id="65" val="3"/>
                <_VerticalScroll id="73"/>
                <_Orientation id="143"/>
              </PropertyList>
            </Control>
            <Control ISN_FATHER="18" _test_id="10" id="10">
              <PropertyList model="CTRL_GUI0_EDIT">
                <Model ID="MODEL_GUI_INT" id="1">
                  <Var FieldID="3"/>
                </Model>
                <Placement id="20" right="100"/>
                <X id="21" val="100"/>
                <Y id="22" val="72"/>
                <Width id="23" val="292"/>
                <Height id="24" val="10"/>
                <Data FieldID="3" id="43"/>
                <ControlName id="46" val="Token"/>
                <Modifiable id="53"/>
                <HorizontalScroll id="72"/>
                <VerticalScroll id="73"/>
                <AllowCRInData id="74"/>
                <ExpansionWindow id="84"/>
                <_Orientation id="143"/>
                <ShowScrollBars id="273"/>
                <TabOrder id="314" val="7"/>
                <AllowParking id="315"/>
                <MultilineWordwrapScroll id="455" val="2"/>
              </PropertyList>
            </Control>
            <Control ISN_FATHER="18" _test_id="20" id="20">
              <PropertyList model="CTRL_GUI0_STATIC">
                <Text id="19" valUnicode="Token Secret:"/>
                <X id="21" val="16"/>
                <Y id="22" val="88"/>
                <Width id="23" val="76"/>
                <Height id="24" val="10"/>
                <Style id="63" val="7"/>
                <HorizontalAlignment id="65" val="3"/>
                <_VerticalScroll id="73"/>
                <_Orientation id="143"/>
              </PropertyList>
            </Control>
            <Control ISN_FATHER="18" _test_id="21" id="21">
              <PropertyList model="CTRL_GUI0_EDIT">
                <Model ID="MODEL_GUI_INT" id="1">
                  <Var FieldID="4"/>
                </Model>
                <Placement id="20" right="100"/>
                <X id="21" val="100"/>
                <Y id="22" val="88"/>
                <Width id="23" val="292"/>
                <Height id="24" val="10"/>
                <Data FieldID="4" id="43"/>
                <ControlName id="46" val="Token Secret"/>
                <Modifiable id="53"/>
                <HorizontalScroll id="72"/>
                <VerticalScroll id="73"/>
                <AllowCRInData id="74"/>
                <ExpansionWindow id="84"/>
                <_Orientation id="143"/>
                <ShowScrollBars id="273"/>
                <TabOrder id="314" val="8"/>
                <AllowParking id="315"/>
                <MultilineWordwrapScroll id="455" val="2"/>
              </PropertyList>
            </Control>
            <Control ISN_FATHER="18" _test_id="24" id="24">
              <PropertyList model="CTRL_GUI0_STATIC">
                <Text id="19" valUnicode="Authorization Link:"/>
                <X id="21" val="14"/>
                <Y id="22" val="104"/>
                <Width id="23" val="78"/>
                <Height id="24" val="10"/>
                <Style id="63" val="7"/>
                <HorizontalAlignment id="65" val="3"/>
                <_VerticalScroll id="73"/>
                <_Orientation id="143"/>
              </PropertyList>
            </Control>
            <Control ISN_FATHER="18" _test_id="25" id="25">
              <PropertyList model="CTRL_GUI0_EDIT">
                <Model ID="MODEL_GUI_INT" id="1">
                  <Var FieldID="5"/>
                </Model>
                <Placement id="20" right="100"/>
                <X id="21" val="100"/>
                <Y id="22" val="104"/>
                <Width id="23" val="292"/>
                <Height id="24" val="10"/>
                <Data FieldID="5" id="43"/>
                <ControlName id="46" val="AuthorizationLink"/>
                <Modifiable id="53"/>
                <HorizontalScroll id="72"/>
                <VerticalScroll id="73"/>
                <AllowCRInData id="74"/>
                <ExpansionWindow id="84"/>
                <_Orientation id="143"/>
                <ShowScrollBars id="273"/>
                <TabOrder id="314" val="9"/>
                <AllowParking id="315"/>
                <MultilineWordwrapScroll id="455" val="2"/>
              </PropertyList>
            </Control>
            <Control ISN_FATHER="18" _test_id="22" id="22">
              <PropertyList model="CTRL_GUI0_STATIC">
                <Text id="19" valUnicode="Verifier:"/>
                <X id="21" val="16"/>
                <Y id="22" val="120"/>
                <Width id="23" val="76"/>
                <Height id="24" val="10"/>
                <Style id="63" val="7"/>
                <HorizontalAlignment id="65" val="3"/>
                <_VerticalScroll id="73"/>
                <_Orientation id="143"/>
              </PropertyList>
            </Control>
            <Control ISN_FATHER="18" _test_id="23" id="23">
              <PropertyList model="CTRL_GUI0_EDIT">
                <Model ID="MODEL_GUI_INT" id="1">
                  <Var FieldID="6"/>
                </Model>
                <Placement id="20" right="100"/>
                <X id="21" val="100"/>
                <Y id="22" val="120"/>
                <Width id="23" val="292"/>
                <Height id="24" val="10"/>
                <Data FieldID="6" id="43"/>
                <ControlName id="46" val="Verifier"/>
                <Modifiable id="53"/>
                <HorizontalScroll id="72"/>
                <VerticalScroll id="73"/>
                <AllowCRInData id="74"/>
                <ExpansionWindow id="84"/>
                <_Orientation id="143"/>
                <ShowScrollBars id="273"/>
                <TabOrder id="314" val="10"/>
                <AllowParking id="315"/>
                <MultilineWordwrapScroll id="455" val="2"/>
              </PropertyList>
            </Control>
            <Control ISN_FATHER="18" _test_id="19" id="19">
              <PropertyList model="CTRL_GUI0_EDIT">
                <Model ID="MODEL_GUI_INT" id="1">
                  <Var FieldID="10"/>
                </Model>
                <Placement bottom="100" id="20" right="100"/>
                <X id="21" val="12"/>
                <Y id="22" val="136"/>
                <Width id="23" val="380"/>
                <Height id="24" val="64"/>
                <Data FieldID="10" id="43"/>
                <ControlName id="46" val="Profile"/>
                <Color id="51" val="5"/>
                <Modifiable id="53"/>
                <MultiLineEdit id="71" val="Y"/>
                <VerticalScroll id="73" val="Y"/>
                <AllowCRInData id="74" val="Y"/>
                <ExpansionWindow id="84"/>
                <_Orientation id="143"/>
                <TabOrder id="314" val="11"/>
                <MultilineWordwrapScroll id="455" val="3"/>
              </PropertyList>
            </Control>
            <Control _test_id="13" id="13">
              <PropertyList model="CTRL_GUI0_STATIC">
                <Text id="19"/>
                <X id="21" val="4"/>
                <Y id="22" val="211"/>
                <Width id="23" val="396"/>
                <Height id="24" val="80"/>
                <Color id="51" val="14"/>
                <Style id="63" val="7"/>
                <StaticType id="70" val="128"/>
                <MultiLine id="71"/>
                <_VerticalScroll id="73"/>
                <_Orientation id="143"/>
                <Line3D id="184"/>
              </PropertyList>
            </Control>
            <Control ISN_FATHER="13" _test_id="14" id="14">
              <PropertyList model="CTRL_GUI0_STATIC">
                <Text id="19" valUnicode="{\rtf1\fbidis\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fnil\fcharset0 Microsoft Sans Serif;}{\f1\fnil\fcharset177 Microsoft Sans Serif;}}&#xD;&#xA;{\colortbl ;\red0\green0\blue0;}&#xD;&#xA;{\*\generator Msftedit 5.41.21.2509;}\viewkind4\uc1\pard\ltrpar\cf1\f0\fs16 The authentication is done as defined at:\par&#xD;&#xA;http://developer.linkedin.com/docs/DOC-1008\par&#xD;&#xA;\par&#xD;&#xA;An empty application was defined in the MSETEST Linkedin account.\par&#xD;&#xA;To create an application, simply go to:\par&#xD;&#xA;https://www.linkedin.com/secure/developer\par&#xD;&#xA;\par&#xD;&#xA;The API Key is taken from this application and it will be used for the authentication.\par&#xD;&#xA;The authentication is done using a .NET browser control which connects to Linkedin and gets the access token back.\lang1037\f1\rtlch\par&#xD;&#xA;\lang1033\b\f0\ltrch\fs20\par&#xD;&#xA;}&#xD;&#xA;"/>
                <X id="21" val="12"/>
                <Y id="22" val="216"/>
                <Width id="23" val="380"/>
                <Height id="24" val="73"/>
                <Color id="51" val="14"/>
                <Style id="63" val="1"/>
                <EnableRTF id="69" val="Y"/>
                <MultiLine id="71"/>
                <_VerticalScroll id="73"/>
                <_Orientation id="143"/>
                <Line3D id="184"/>
                <Border id="452"/>
              </PropertyList>
            </Control>
          </FormEntry>
        </TaskForms>
        <Expressions>
          <Expression id="1">
            <ExpSyntax val="'CN14_Linkedin Profile and Status'"/>
            <ExpAttribute val="A"/>
          </Expression>
          <Expression id="2">
            <ExpSyntax val="DNException().Message"/>
            <ExpAttribute val="O"/>
          </Expression>
          <Expression id="3">
            <ExpSyntax val="DNExceptionOccurred()"/>
            <ExpAttribute val="B"/>
          </Expression>
          <Expression id="4">
            <ExpSyntax val="'xp3mJ48u-UzcS51WNF_HWAq9qqSDwcGgO66jyxPZytuQN1Z3p8fwQu-dZQmjVteY'"/>
            <ExpAttribute val="A"/>
          </Expression>
          <Expression id="5">
            <ExpSyntax val="'2VWAiKWyunFSBNmly0-Z_iyNspQcSKIFQ1Kq_8J7ghDJtNDfTZ4PuDRoftwq6Tme'"/>
            <ExpAttribute val="A"/>
          </Expression>
          <Expression id="6">
            <ExpSyntax val="Trim({0,5})&lt;>''"/>
            <ExpAttribute val="B"/>
          </Expression>
          <Expression id="7">
            <ExpSyntax val="'~'"/>
            <ExpAttribute val="A"/>
          </Expression>
          <Expression id="8">
            <ExpSyntax val="1"/>
            <ExpAttribute val="N"/>
          </Expression>
          <Expression id="9">
            <ExpSyntax val="Trim({0,6})&lt;>''"/>
            <ExpAttribute val="B"/>
          </Expression>
          <Expression id="10">
            <ExpSyntax val="CASE({0,8},1,'',2,':(current-status)',3,'/network?type=STAT','')"/>
            <ExpAttribute val="A"/>
          </Expression>
        </Expressions>
        <EVNT DESC="Authenticate" FORCE_EXIT="N" id="1">
          <Event>
            <EventType val="N"/>
            <PublicObject comp="-1"/>
          </Event>
        </EVNT>
        <EVNT DESC="Get Info" FORCE_EXIT="N" id="2">
          <Event>
            <EventType val="N"/>
            <PublicObject comp="-1"/>
          </Event>
        </EVNT>
        <EVNT DESC="Update Status" FORCE_EXIT="N" id="3">
          <Event>
            <EventType val="N"/>
            <PublicObject comp="-1"/>
          </Event>
        </EVNT>
        <Task MainProgram="N">
          <Header Description="Authentication" ISN_2="2" LastIsn="2" id="579">
            <ExecutionRight comp="-1"/>
            <Resident val="N"/>
            <SQL val="N"/>
            <ReturnValue>
              <ReturnValueAttr/>
              <ParametersCount val="2"/>
              <ParametersAttributes/>
            </ReturnValue>
            <SqlWhereExist val="N"/>
            <TaskType val="O"/>
            <External val="N"/>
            <FormType val="M"/>
            <DotNetObjectExists val="Y"/>
            <LastModified _date="734336" _time="37126" date="18/07/2011" time="10:18:46"/>
          </Header>
          <ItemIsn val="7"/>
          <Resource>
            <Columns>
              <Column id="19" name=".NET browser">
                <PropertyList model="FIELD">
                  <Model attr_obj="FIELD_BLOB" id="1"/>
                  <Size id="174" val="28"/>
                  <Definition id="175" val="1"/>
                  <_FieldStyle id="276" val="5"/>
                  <ObjectType id="478" val="System.Windows.Forms.WebBrowser"/>
                </PropertyList>
              </Column>
              <Column id="26" name="tmp">
                <PropertyList model="FIELD">
                  <Model attr_obj="FIELD_ALPHA" id="1"/>
                  <Picture id="157" valUnicode="1"/>
                  <StoredAs id="173" val="1"/>
                  <Size id="174" val="1"/>
                  <_Flip id="194"/>
                </PropertyList>
              </Column>
              <Column id="38" name="sender">
                <PropertyList model="FIELD">
                  <Model attr_obj="FIELD_BLOB" id="1"/>
                  <StoredAs id="173" val="29"/>
                  <Size id="174" val="28"/>
                  <Definition id="175" val="1"/>
                  <_FieldStyle id="276" val="5"/>
                  <ObjectType id="478" val="System.Object"/>
                </PropertyList>
              </Column>
              <Column id="36" name="e">
                <PropertyList model="FIELD">
                  <Model attr_obj="FIELD_BLOB" id="1"/>
                  <StoredAs id="173" val="29"/>
                  <Size id="174" val="28"/>
                  <Definition id="175" val="1"/>
                  <_FieldStyle id="276" val="5"/>
                  <ObjectType id="478" val="System.Windows.Forms.WebBrowserNavigatedEventArgs"/>
                </PropertyList>
              </Column>
              <Column id="46" name="query params">
                <PropertyList model="FIELD">
                  <Model attr_obj="FIELD_ALPHA" id="1"/>
                  <Picture id="157" valUnicode="200"/>
                  <StoredAs id="173" val="1"/>
                  <Size id="174" val="200"/>
                  <_Flip id="194"/>
                </PropertyList>
              </Column>
              <Column id="48" name="tmp verifier">
                <PropertyList model="FIELD">
                  <Model attr_obj="FIELD_ALPHA" id="1"/>
                  <Picture id="157" valUnicode="200"/>
                  <StoredAs id="173" val="1"/>
                  <Size id="174" val="200"/>
                  <_Flip id="194"/>
                </PropertyList>
              </Column>
              <Column id="47" name="tmp token">
                <PropertyList model="FIELD">
                  <Model attr_obj="FIELD_ALPHA" id="1"/>
                  <Picture id="157" valUnicode="200"/>
                  <StoredAs id="173" val="1"/>
                  <Size id="174" val="200"/>
                  <_Flip id="194"/>
                </PropertyList>
              </Column>
            </Columns>
            <ColumnsLastIsn val="48"/>
          </Resource>
          <Information>
            <Key>
              <Mode val="N"/>
            </Key>
            <DB comp="-1"/>
            <Sort>
              <CLS val="A"/>
            </Sort>
            <ForceRecordDelete DEL="N"/>
            <EndTaskCondition val="N"/>
            <EvaluateEndCondition val="B"/>
            <InitialMode val="M"/>
            <Locate Direction="A"/>
            <Range Direction="A"/>
            <VarRange/>
            <TaskProperties>
              <SelectionTable val="N"/>
              <ConfirmUpdate CNFU="N"/>
              <ConfirmCancel val="N"/>
              <ErrorStrategy val="R"/>
              <LockingStrategy val="O"/>
              <CacheStrategy val="D"/>
              <ForceRecordSuffix val="N"/>
              <TransactionMode val="W"/>
              <TransactionBegin val="P"/>
              <PreloadView val="N"/>
              <AllowEmptyDataview val="Y"/>
              <KeepCreatedContext val="N"/>
            </TaskProperties>
            <SIDE_WIN>
              <AllowOptions val="Y"/>
              <AllowQuery val="Y"/>
              <AllowModify val="Y"/>
              <AllowCreate val="Y"/>
              <AllowDelete val="Y"/>
              <AllowLocate val="Y"/>
              <AllowRange val="Y"/>
              <AllowIndexChange val="N"/>
              <AllowSorting val="Y"/>
              <AllowIOFiles val="N"/>
              <RecordCycle val="Y"/>
              <AllowEvents val="Y"/>
              <AllowIndexOptimization val="Y"/>
              <AllowLocationInQuery val="Y"/>
              <AllowPrintingData val="N"/>
            </SIDE_WIN>
            <WIN>
              <OpenTaskWindow val="Y"/>
              <CloseTaskWindow val="Y"/>
              <ForegroundWindow val="Y"/>
              <FlipFld val="N"/>
              <RefreshTaskWindow ReturnValue="N"/>
            </WIN>
            <BOX>
              <Direction val="V"/>
            </BOX>
          </Information>
          <TaskLogic>
            <LogicUnit id="2" propagate="78">
              <Level val="R"/>
              <Type val="M"/>
              <_DspTemplate val="0"/>
              <_HeaderPosition val="1"/>
              <Scope val="S"/>
              <EngineDirective val="S"/>
              <ShowMessage val="Y"/>
              <Condition val="89"/>
              <_TotalVariabls val="2"/>
              <_TotalVirtuals val="2"/>
              <Event>
                <EventType val="S"/>
                <PublicObject comp="-1"/>
              </Event>
              <LogicLines>
                <LogicLine>
                  <DATAVIEW_SRC FlowIsn="2" Type="M">
                    <Condition val="N"/>
                    <Modifier val="B"/>
                    <Direction val="C"/>
                  </DATAVIEW_SRC>
                </LogicLine>
                <LogicLine>
                  <Select FieldID="1" FlowIsn="3" id="1">
                    <Column val="1"/>
                    <Type val="V"/>
                    <IsParameter val="N"/>
                    <_RecomputeIndex val="1"/>
                    <_FormIndex val="1"/>
                    <_ControlIndex val="1"/>
                    <_OleSubformIdx val="1"/>
                    <_TabbingOrderDspIndex val="1"/>
                    <DIFF_UPDATE val="T"/>
                    <Condition val="Y"/>
                    <Modifier val="S"/>
                    <Direction val="C"/>
                  </Select>
                </LogicLine>
                <LogicLine>
                  <Select FieldID="2" FlowIsn="4" id="2">
                    <Column val="2"/>
                    <Type val="V"/>
                    <IsParameter val="N"/>
                    <_RecomputeIndex val="1"/>
                    <_FormIndex val="1"/>
                    <_ControlIndex val="1"/>
                    <_OleSubformIdx val="1"/>
                    <_TabbingOrderDspIndex val="1"/>
                    <DIFF_UPDATE val="T"/>
                    <Condition val="Y"/>
                    <Modifier val="S"/>
                    <Direction val="C"/>
                  </Select>
                </LogicLine>
              </LogicLines>
            </LogicUnit>
            <LogicUnit id="3" propagate="78">
              <Level val="R"/>
              <Type val="P"/>
              <_DspTemplate val="0"/>
              <_HeaderPosition val="5"/>
              <Scope val="S"/>
              <EngineDirective val="S"/>
              <ShowMessage val="Y"/>
              <Condition val="89"/>
              <Event>
                <EventType val="S"/>
                <PublicObject comp="-1"/>
              </Event>
              <Expanded val="1"/>
              <LogicLines>
                <LogicLine>
                  <Remark FlowIsn="5">
                    <Type val="2"/>
                    <Text val="authenticating and requesting &quot;publish_stream&quot; permission"/>
                  </Remark>
                </LogicLine>
                <LogicLine>
                  <Evaluate FlowIsn="6">
                    <Expression val="1"/>
                    <Condition Exp="2"/>
                    <Modifier val="B"/>
                    <Direction val="C"/>
                  </Evaluate>
                </LogicLine>
                <LogicLine>
                  <Remark FlowIsn="7">
                    <Type val="2"/>
                    <Text val=" "/>
                  </Remark>
                </LogicLine>
              </LogicLines>
            </LogicUnit>
            <LogicUnit id="4" propagate="78">
              <Level val="H"/>
              <Type val="U"/>
              <_DspTemplate val="0"/>
              <_HeaderPosition val="3"/>
              <Scope val="S"/>
              <EngineDirective val="S"/>
              <ShowMessage val="Y"/>
              <Condition val="89"/>
              <_TotalVariabls val="5"/>
              <_TotalVirtuals val="5"/>
              <PRM_LEN val="2"/>
              <Event FieldID="1">
                <EventType val="D"/>
                <EventText val="Navigated"/>
                <PublicObject comp="-1"/>
              </Event>
              <Expanded val="1"/>
              <LogicLines>
                <LogicLine>
                  <Select FieldID="3" FlowIsn="8" id="3">
                    <Column val="3"/>
                    <Type val="V"/>
                    <IsParameter val="Y"/>
                    <DIFF_UPDATE val="T"/>
                    <Condition val="Y"/>
                    <Modifier val="B"/>
                    <Direction val="C"/>
                  </Select>
                </LogicLine>
                <LogicLine>
                  <Select FieldID="4" FlowIsn="9" id="4">
                    <Column val="4"/>
                    <Type val="V"/>
                    <IsParameter val="Y"/>
                    <DIFF_UPDATE val="T"/>
                    <Condition val="Y"/>
                    <Modifier val="B"/>
                    <Direction val="C"/>
                  </Select>
                </LogicLine>
                <LogicLine>
                  <Select FieldID="5" FlowIsn="10" id="5">
                    <Column val="5"/>
                    <Type val="V"/>
                    <IsParameter val="N"/>
                    <DIFF_UPDATE val="T"/>
                    <Condition val="Y"/>
                    <Modifier val="B"/>
                    <Direction val="C"/>
                  </Select>
                </LogicLine>
                <LogicLine>
                  <Update FlowIsn="11">
                    <FieldID val="5"/>
                    <WithValue val="4"/>
                    <Incremental val="N"/>
                    <ForcedUpdate val="Y"/>
                    <Condition val="Y"/>
                    <Modifier val="B"/>
                    <Direction val="C"/>
                  </Update>
                </LogicLine>
                <LogicLine>
                  <BLOCK EndBlock="19" EndBlockSegment="19" FlowIsn="12" Type="I">
                    <Condition Exp="3"/>
                    <Modifier val="B"/>
                    <Direction val="C"/>
                  </BLOCK>
                </LogicLine>
                <LogicLine>
                  <Select FieldID="7" FlowIsn="48" id="7">
                    <Column val="6"/>
                    <Type val="V"/>
                    <IsParameter val="N"/>
                    <DIFF_UPDATE val="T"/>
                    <Condition val="Y"/>
                    <Modifier val="B"/>
                    <Direction val="C"/>
                  </Select>
                </LogicLine>
                <LogicLine>
                  <Select FieldID="6" FlowIsn="49" id="6">
                    <Column val="7"/>
                    <Type val="V"/>
                    <IsParameter val="N"/>
                    <DIFF_UPDATE val="T"/>
                    <Condition val="Y"/>
                    <Modifier val="B"/>
                    <Direction val="C"/>
                  </Select>
                </LogicLine>
                <LogicLine>
                  <Invoke FlowIsn="34">
                    <OperationType val="."/>
                    <TaskID comp="-1"/>
                    <Lock val="N"/>
                    <Arguments>
                      <Argument>
                        <id val="5"/>
                        <Skip val="N"/>
                        <DotNetType val="void"/>
                      </Argument>
                      <Argument>
                        <id val="6"/>
                        <Variable val="5"/>
                        <Skip val="N"/>
                        <Name val="queryParams"/>
                        <DotNetType val="System.String"/>
                      </Argument>
                      <Argument>
                        <id val="7"/>
                        <Variable val="6"/>
                        <Skip val="N"/>
                        <Name val="_verifier"/>
                        <VT_Type val="4"/>
                        <DotNetType val="System.String"/>
                      </Argument>
                      <Argument>
                        <id val="8"/>
                        <Variable val="7"/>
                        <Skip val="N"/>
                        <Name val="_token"/>
                        <VT_Type val="4"/>
                        <DotNetType val="System.String"/>
                      </Argument>
                    </Arguments>
                    <Wait val="Y"/>
                    <SyncData val="N"/>
                    <FunctionName val="func"/>
                    <SnippetCode val="using System;&#xA;using System.Collections.Specialized;&#xA;using System.Web;&#xA;&#xA;public static class Snippet&#xA;{&#xA;&#x9;public static void func(System.String queryParams, ref System.String _verifier, ref System.String _token)&#xA;&#x9;{&#xA;                if (queryParams.Length > 0)&#xA;                {&#xA;                    //Store the Token and Token Secret&#xA;                    NameValueCollection qs = HttpUtility.ParseQueryString(queryParams);&#xA;                    if (qs[&quot;oauth_token&quot;] != null)&#xA;                    {&#xA;                        _token = qs[&quot;oauth_token&quot;];&#xA;                    }&#xA;                    if (qs[&quot;oauth_verifier&quot;] != null)&#xA;                    {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;_verifier = qs[&quot;oauth_verifier&quot;];&#xA;                    }&#xA;                }&#xA;&#x9;}&#xA;&#xA;}"/>
                    <CompiledCode val="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
                    <SnippetLanguage val="C"/>
                    <ForCompactFramework val="N"/>
                    <isGuiThreadExecution val="Y"/>
                    <CompileTime HighDateTime="30164250" LowDateTime="1994392685"/>
                    <AssemblyIds val="-1292091557,-279589575,"/>
                    <RetainFocus val="N"/>
                    <Condition val="Y"/>
                    <Modifier val="B"/>
                    <Direction val="C"/>
                  </Invoke>
                </LogicLine>
                <LogicLine>
                  <STP Buttons="O" DefaultButton="1" ERR_LOG_DEF_CHG="N" Exp="6" FlowIsn="14" IMG_DEF_CHG="N" Image="E" Mode="W" TTL_DEF_CHG="N" TitleTxt="Warning" VR_DISP="B">
                    <AppendToErrorLog val="N"/>
                    <Disabled val="1"/>
                    <Condition Exp="5"/>
                    <Modifier val="B"/>
                    <Direction val="C"/>
                  </STP>
                </LogicLine>
                <LogicLine>
                  <Update FlowIsn="59">
                    <Parent val="1"/>
                    <FieldID val="6"/>
                    <WithValue val="7"/>
                    <Incremental val="N"/>
                    <ForcedUpdate val="Y"/>
                    <Condition val="Y"/>
                    <Modifier val="B"/>
                    <Direction val="C"/>
                  </Update>
                </LogicLine>
                <LogicLine>
                  <Update FlowIsn="60">
                    <Parent val="1"/>
                    <FieldID val="3"/>
                    <WithValue val="8"/>
                    <Incremental val="N"/>
                    <ForcedUpdate val="Y"/>
                    <Condition val="Y"/>
                    <Modifier val="B"/>
                    <Direction val="C"/>
                  </Update>
                </LogicLine>
                <LogicLine>
                  <RaiseEvent FlowIsn="15">
                    <Event>
                      <EventType val="I"/>
                      <InternalEventID val="14"/>
                      <PublicObject comp="-1"/>
                    </Event>
                    <Wait val="78"/>
                    <Condition val="Y"/>
                    <Modifier val="B"/>
                    <Direction val="C"/>
                  </RaiseEvent>
                </LogicLine>
                <LogicLine>
                  <END_BLK FlowIsn="16"/>
                </LogicLine>
                <LogicLine>
                  <Remark FlowIsn="17">
                    <Type val="2"/>
                    <Text val=" "/>
                  </Remark>
                </LogicLine>
              </LogicLines>
            </LogicUnit>
          </TaskLogic>
          <TaskForms>
            <FormEntry _last_isn="1" _last_test_id="1" id="3">
              <PropertyList model="FORM_GUI0">
                <Width id="23" val="520"/>
                <Height id="24" val="280"/>
                <MinimizeButton id="28"/>
                <MaximizeButton id="29"/>
                <_Comment id="218"/>
                <FormName id="311" valUnicode="Authentication"/>
                <WindowType id="358" val="6"/>
              </PropertyList>
              <Control PDOD="128" _test_id="1" id="1">
                <PropertyList model="CTRL_GUI0_DOTNET">
                  <Placement bottom="100" id="20" right="100"/>
                  <X id="21"/>
                  <Y id="22"/>
                  <Width id="23" val="520"/>
                  <Height id="24" val="280"/>
                  <Data id="43"/>
                  <ControlName id="46" val=".NET browser"/>
                  <TabOrder id="314" val="1"/>
                  <DotnetObject FieldID="1" id="546"/>
                </PropertyList>
              </Control>
            </FormEntry>
          </TaskForms>
          <Expressions>
            <Expression id="1">
              <ExpSyntax val="{0,1}.Navigate(DotNet.System.Uri({1,5}))"/>
              <ExpAttribute val="O"/>
            </Expression>
            <Expression id="2">
              <ExpSyntax val="IsFirstRecordCycle(0)"/>
              <ExpAttribute val="B"/>
            </Expression>
            <Expression id="3">
              <ExpSyntax val="InStr({0,5},'oauth_verifier')>0"/>
              <ExpAttribute val="B"/>
            </Expression>
            <Expression id="4">
              <ExpSyntax val="{0,4}.Url.Query"/>
              <ExpAttribute val="O"/>
            </Expression>
            <Expression id="5">
              <ExpSyntax val="DNExceptionOccurred()"/>
              <ExpAttribute val="B"/>
            </Expression>
            <Expression id="6">
              <ExpSyntax val="DNException().Message"/>
              <ExpAttribute val="O"/>
            </Expression>
            <Expression id="8">
              <ExpSyntax val="{0,7}"/>
              <ExpAttribute val="A"/>
            </Expression>
            <Expression id="9">
              <ExpSyntax val="{0,6}"/>
              <ExpAttribute val="A"/>
            </Expression>
          </Expressions>
          <EVNT DESC="Start" FORCE_EXIT="N" id="1">
            <Event>
              <EventType val="N"/>
              <PublicObject comp="-1"/>
            </Event>
          </EVNT>
        </Task>
      </Task>
    </Programs>
  </ProgramsRepository>

</Application>
